2011-08-08  Jason Merrill  <jason@redhat.com>

	PR c++/50020
	* semantics.c (finish_call_expr): Don't look at 'this' if we
	had an explicit object argument.

	PR c++/50011
	* typeck2.c (check_narrowing): Fix integer logic.

2011-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>

	* Make-lang.in (g++$(exeext)): Add $(EXTRA_GCC_LIBS).

2011-08-05  Jason Merrill  <jason@redhat.com>

	PR c++/48993
	* semantics.c (potential_constant_expression_1) [CALL_EXPR]: Sorry
	on 'this' in a constructor.

	PR c++/49921
	* semantics.c (finish_decltype_type): Call invalid_nonstatic_memfn_p.

	PR c++/49669
	* init.c (perform_member_init): Handle invalid array initializer.

	PR c++/49988
	* semantics.c (cxx_eval_array_reference): Handle failure to
	reduce the array operand to something we can work with.

2011-08-05  Gabriel Charette  <gchare@google.com>

	* decl.c (finish_function): Remove unecessary line 0 hack.

2011-08-05  Jason Merrill  <jason@redhat.com>

	PR c++/47453
	* typeck.c (build_x_compound_expr_from_list): Also complain
	about ({...}).

	PR c++/49812
	* typeck.c (cp_build_unary_op) [POSTINCREMENT_EXPR]: Strip cv-quals.

	PR c++/49983
	* parser.c (cp_parser_range_for): Only do auto deduction in
	template if the range is non-dependent.

	* init.c (perform_member_init): Always build_aggr_init
	for a class member with an explicit mem-initializer.

	* pt.c (unify) [TEMPLATE_TYPE_PARM]: Allow VLA for C++0x 'auto'.

2011-08-04  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/49905
	* decl.c (cxx_init_decl_processing): Add alloc_size (1) attribute
	for operator new and operator new [].  Call init_attributes.

2011-08-02  Jason Merrill  <jason@redhat.com>

	PR c++/43886
	* parser.c (cp_parser_lambda_body): Clear local_variables_forbidden_p.

	PR c++/49577
	* typeck2.c (check_narrowing): Check unsigned mismatch.
	* semantics.c (finish_compound_literal): check_narrowing.

	PR c++/49593
	* pt.c (find_parameter_packs_r): Handle CONSTRUCTOR.

	PR c++/49803
	* init.c (sort_mem_initializers): Initialize uses_unions_p here.
	(build_field_list): Not here.

	PR c++/49834
	* parser.c (build_range_temp): Split out from...
	(cp_convert_range_for): ...here.
	(do_range_for_auto_deduction): New.
	(cp_parser_range_for): Use it.

2011-08-02  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (finish_omp_atomic): Adjust prototype.
	(cxx_omp_const_qual_no_mutable): New prototype.
	(finish_omp_taskyield): New prototype.
	* parser.c (cp_parser_omp_atomic): (cp_parser_omp_atomic): Handle
	parsing OpenMP 3.1 atomics.  Adjust finish_omp_atomic caller.
	(cp_parser_omp_clause_name): Handle final and mergeable clauses.
	(cp_parser_omp_clause_final, cp_parser_omp_clause_mergeable): New
	functions.
	(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_FINAL
	and PRAGMA_OMP_CLAUSE_MERGEABLE.
	(OMP_TASK_CLAUSE_MASK): Allow final and mergeable clauses.
	(cp_parser_omp_taskyield): New function.
	(cp_parser_pragma): Handle PRAGMA_OMP_TASKYIELD.
	(cp_parser_omp_clause_reduction): Handle min and max.
	* pt.c (tsubst_expr) <case OMP_ATOMIC>: Handle OpenMP 3.1 atomics.
	(tsubst_omp_clauses): Handle OMP_CLAUSE_FINAL and
	OMP_CLAUSE_MERGEABLE.
	* semantics.c (finish_omp_atomic): Add OPCODE, V, LHS1 and RHS1
	arguments.  Handle OpenMP 3.1 atomics.  Adjust c_finish_omp_atomic
	caller.
	(finish_omp_clauses): Don't complain about const qualified
	predetermined vars and static data members in firstprivate clause.
	Handle OMP_CLAUSE_FINAL and OMP_CLAUSE_MERGEABLE. Handle MIN_EXPR
	and MAX_EXPR.
	(finish_omp_taskyield): New function.
	* cp-gimplify.c (cxx_omp_const_qual_no_mutable): New function.
	(cxx_omp_predetermined_sharing): Use it.

2011-08-02  Jason Merrill  <jason@redhat.com>

	* call.c (build_call_a): Also check at_function_scope_p.

2011-08-01  Jason Merrill  <jason@redhat.com>

	PR c++/49932
	* mangle.c (write_prefix): Handle decltype.

	PR c++/49924
	* semantics.c (cxx_eval_vec_init_1): Fix logic.

	PR c++/49813
	* semantics.c (potential_constant_expression_1): Allow any builtin.
	(morally_constexpr_builtin_function_p): Remove.

2011-07-29  Jason Merrill  <jason@redhat.com>

	PR c++/49867
	* parser.c (cp_parser_lambda_expression): Also clear in_statement
	and in_switch_statement_p.
	(cp_parser_class_specifier): Likewise.

2011-07-28  Jason Merrill  <jason@redhat.com>

	PR c++/49808
	* pt.c (tsubst) [TEMPLATE_PARM_INDEX]: Call convert_from_reference.
	(convert_nontype_argument, tsubst_template_arg): Handle its output.

2011-07-28  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/49813
	* semantics.c (potential_constant_expression_1):  Handle FMA_EXPR.

2011-07-27  Jeffrey Yasskin  <jyasskin@google.com>

	* pt.c (build_template_decl): Copy the function_decl's
	source location to the new template_decl.

2011-07-26  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/49776
	* typeck.c (cp_build_modify_expr): Check digest_init return value
	for error_mark_node.

2011-07-25  Paolo Carlini  <paolo.carlini@oracle.com>

	PR bootstrap/49845
	* parser.c (cp_parser_perform_range_for_lookup): Always assign *being
	and *end before returning.

2011-07-25  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/49838
	* parser.c (cp_parser_perform_range_for_lookup): Early return if
	error_operand_p (range).

2011-07-23  Jason Merrill  <jason@redhat.com>

	PR c++/49823
	* parser.c (cp_parser_qualifying_entity): Handle templates.

2011-07-22  Jason Merrill  <jason@redhat.com>

	PR c++/49793
	* typeck2.c (check_narrowing): Downgrade permerror to pedwarn.
	Make conditional on -Wnarrowing.

2011-07-22  Ville Voutilainen  <ville.voutilainen@gmail.com>

	Warn about the use of final/override in non-c++0x mode, and
	add __final for non-c++0x mode.
	* cp-tree.h (cpp0x_warn_str): Add CPP0X_OVERRIDE_CONTROLS.
	* error.c (maybe_warn_cpp0x): Adjust.
	* parser.c (cp_parser_virt_specifier_seq_opt): Use it. Add
	'__final' as a non-c++0x alternative for 'final'.

2011-07-22  Jason Merrill  <jason@redhat.com>
	    Mark Glisse  <marc.glisse@normalesup.org>

	PR c++/30112
	* decl.c (cp_finish_decl): Apply pragma redefine_extname in
	other namespaces as well.
	* name-lookup.c (c_linkage_bindings): Define.
	(lookup_extern_c_fun_in_all_ns): Rename from
	lookup_extern_c_fun_binding_in_all_ns.  Return tree.
	(pushdecl_maybe_friend_1): Adjust.  Copy DECL_ASSEMBLER_NAME.

2011-07-20  Jason Merrill  <jason@redhat.com>

	* parser.c (cp_parser_initializer_list): Handle C99 .id= and [N]=
	designated initializer syntax.
	* decl.c (check_array_designated_initializer): Add index parm.
	(maybe_deduce_size_from_array_init): Pass it.
	(reshape_init_array_1): Likewise.

	PR c++/6709 (DR 743)
	PR c++/42603 (DR 950)
	* parser.c (token_is_decltype, cp_lexer_next_token_is_decltype): New.
	(cp_parser_nested_name_specifier_opt): Allow decltype.
	(cp_parser_qualifying_entity): Likewise.
	(cp_parser_decltype): Replace source tokens with CPP_DECLTYPE.
	(cp_parser_simple_type_specifier): Handle decltype as scope.
	(cp_parser_base_specifier): Allow decltype.
	(cp_parser_base_clause): Don't crash on null base.
	* parser.h (CPP_KEYWORD, CPP_TEMPLATE_ID): Move to c-common.h.
	(CPP_NESTED_NAME_SPECIFIER, N_CP_TTYPES): Likewise.

2011-07-19  Jason Merrill  <jason@redhat.com>

	PR c++/49785
	* pt.c (coerce_template_parms): Handle non-pack after pack.

2011-07-19  Richard Guenther  <rguenther@suse.de>

	* call.c (build_special_member_call): Use fold_build_pointer_plus.
	* class.c (build_base_path): Likewise.
	(convert_to_base_statically): Likewise.
	(dfs_accumulate_vtbl_inits): Likewise.
	* cp-gimplify.c (cxx_omp_clause_apply_fn): Likewise.
	* except.c (expand_start_catch_block): Likewise.
	* init.c (expand_virtual_init): Likewise.
	(build_new_1): Likewise.
	(build_vec_delete_1): Likewise.
	(build_vec_delete): Likewise.
	* rtti.c (build_headof): Likewise.
	(tinfo_base_init): Likewise.
	* typeck.c (get_member_function_from_ptrfunc): Likewise.
	(cp_build_addr_expr_1): Likewise.
	* typeck2.c (build_m_component_ref): Likewise.

2011-07-18  Martin Jambor  <mjambor@suse.cz>

	* parser.c (cp_parser_parameter_declaration_list): Initialize
	parenthesized_p.

2011-07-16  Jason Merrill  <jason@redhat.com>

	* pt.c (tinst_level_tick, last_template_error_tick): Replace with
	last_error_tinst_level.
	(push_tinst_level, pop_tinst_level): Adjust.
	(problematic_instantiation_changed): Adjust.
	(record_last_problematic_instantiation): Adjust.
	* error.c (cp_print_error_function): Don't print
	current_function_decl if we're in a template instantiation context.
	(print_instantiation_full_context): Always print first line.

2011-07-16  Nathan Froyd  <froydnj@codesourcery.com>
	    Jason Merrill  <jason@redhat.com>

	PR c++/45329
	PR c++/48934
	* cp-tree.h (fn_type_unification): Add `bool' parameter.
	* pt.c (enum template_base_result): Define.
	(unify_success, unify_unknown): Define.
	(unify_parameter_deduction_failure): Define.
	(unify_invalid, unify_cv_qual_mismatch, unify_type_mismatch): Define.
	(unify_parameter_pack_mismatch): Define.
	(unify_parameter_pack_inconsistent): Define.
	(unify_ptrmem_cst_mismatch, unify_vla_arg): Define.
	(unify_expression_unequal, unify_inconsistency): Define.
	(unify_method_type_error, unify_arity): Likewise.
	(unify_too_many_parameters, unify_too_few_parameters): Define.
	(unify_arg_conversion, unify_no_common_base): Define.
	(unify_illformed_ptrmem_cst_expr): Define.
	(unify_substitution_failure): Define.
	(unify_inconsistent_template_template_parameters): Define.
	(unify_template_deduction_failure): Define.
	(unify_template_argument_mismatch): Define.
	(unify_overload_resolution_failure): Define.
	(comp_template_args_with_info): New function, split out from...
	(comp_template_args): ...here.	Call it.
	(deduction_tsubst_fntype): Add `complain' parameter'.  Pass it
	to tsubst.
	(unify): Add `explain_p' parameter.  Pass to all relevant calls.
	Call above status functions when appropriate.
	(resolve_overloaded_unification, try_one_overload): Likewise.
	(type_unification, type_unification_real): Likewise.
	(unify_pack_expansion): Likewise.
	(get_template_base, try_class_unification): Likewise.
	(get_bindings, more_specialized_fn): Pass false to unification
	calls.
	(get_class_bindings, do_auto_deduction): Likewise.
	(convert_nontype_argument): Likewise.
	(fn_type_unification): Likewise.  Pass tf_warning_or_error if
	explain_p.
	(get_template_base): Add `explain_p' parameter and pass it to
	try_class_unification.	Return an enum template_base_result.
	* class.c (resolve_address_of_overloaded_function): Pass false to
	fn_type_unification.
	* call.c (enum rejection_reason_code): Add new codes.
	(struct rejection_reason): Add template_unification field.
	Add template_instantiation field.
	(template_unification_rejection): Define.
	(template_unification_error_rejection): Define.
	(template_instantiation_rejection): Define.
	(invalid_copy_with_fn_template_rejection): Define.
	(add_template_candidate): Pass false to unify.
	Provide more rejection reasons when possible.
	(print_template_unification_rejection): Define.
	(print_arity_rejection): Define, split out from...
	(print_z_candidate): ...here.  Add cases for new rejection
	reasons.

2011-07-15  Jason Merrill  <jason@redhat.com>

	* Make-lang.in (check-g++-strict-gc): New.
	(cp/except.o): Depend on gt-cp-except.h
	* except.c: Include gt-cp-except.h.
	* config-lang.in (gtfiles): Add cp/except.c.
	* decl2.c (mark_used): Adjust constexpr condition, set
	function_depth around template instantiation.
	* parser.c (cp_parser_lambda_body): Set function_depth.
	* semantics.c (maybe_add_lambda_conv_op): Likewise.

	PR testsuite/49741
	* Make-lang.in (check-c++0x): Use --extra_opts instead of--tool_opts.

2011-07-13  Jason Merrill  <jason@redhat.com>

	* Make-lang.in (check-c++0x): New.

2011-07-13  Richard Sandiford  <richard.sandiford@linaro.org>

	* typeck2.c (split_nonconstant_init_1): Pass the initializer directly,
	rather than a pointer to it.  Return true if the whole of the value
	was initialized by the generated statements.  Use
	complete_ctor_at_level_p instead of count_type_elements.

2011-07-12   Diego Novillo  <dnovillo@google.com>

	* name-lookup.h (cp_binding_level): Rename from cxx_scope.
	Update all users.
	(struct cp_binding_level): Fix indentation.

2011-07-11  Jason Merrill  <jason@redhat.com>

	PR c++/49672
	* pt.c (extract_fnparm_pack): Split out from...
	(make_fnparm_pack): ...here.
	(instantiate_decl): Handle non-pack parms after a pack.
	* semantics.c (maybe_add_lambda_conv_op): Don't in a template.

	* decl2.c (decl_constant_var_p): Use decl_maybe_constant_var_p.

	PR c++/44609
	* cp-tree.h (struct tinst_level): Add errors field.
	* pt.c (neglectable_inst_p, limit_bad_template_recurson): New.
	(push_tinst_level): Don't start another decl in that case.
	(reopen_tinst_level): Adjust errors field.
	* decl2.c (cp_write_global_declarations): Don't complain about
	undefined inline if its template was defined.
	* mangle.c (mangle_decl_string): Handle failure from push_tinst_level.

2011-07-10  Jason Merrill  <jason@redhat.com>

	PR c++/49691
	* parser.c (cp_parser_late_return_type_opt): Check quals parameter
	rather than current_class_type to determine whether to set 'this'.
	(cp_parser_direct_declarator): Pass -1 to quals if member_p is false.
	(cp_parser_init_declarator): Pass down member_p.

2011-07-09  Jason Merrill  <jason@redhat.com>

	* tree.c (build_vec_init_elt): Strip TARGET_EXPR.

2011-07-08  Jason Merrill  <jason@redhat.com>

	PR c++/45437
	* typeck.c (cp_build_modify_expr): Preevaluate RHS.

	* method.c (use_thunk): Use cgraph_add_to_same_comdat_group.
	* optimize.c (maybe_clone_body): Likewise.
	* semantics.c (maybe_add_lambda_conv_op): Likewise.

	PR c++/45603
	* decl.c (expand_static_init): Don't get confused by user
	declaration of __cxa_guard_acquire.

	* typeck.c (cp_apply_type_quals_to_decl): Don't check
	COMPLETE_TYPE_P either.

	PR c++/49673
	* typeck.c (cp_apply_type_quals_to_decl): Don't check
	TYPE_NEEDS_CONSTRUCTING.

2011-07-07  Jason Merrill  <jason@redhat.com>

	PR c++/49663
	* pt.c (push_deduction_access_scope): Preserve
	processing_template_decl across push_to_top_level.
	And revert:
	* class.c (pushclass): Accept NULL argument.
	(popclass): Deal with popping null class.
	* pt.c (push_access_scope, pop_access_scope): Use them rather than
	push_to_top_level/pop_from_top_level.
	* name-lookup.c (lookup_name_real_1): Check current_class_type.

2011-07-07  Jakub Jelinek  <jakub@redhat.com>

	PR c/49644
	* typeck.c (cp_build_binary_op): For MULT_EXPR and TRUNC_DIV_EXPR with
	one non-complex and one complex argument, call save_expr on both
	operands.

2011-07-06  Jason Merrill  <jason@redhat.com>

	PR c++/49353
	* semantics.c (expand_or_defer_fn_1): Clear DECL_EXTERNAL
	on kept inlines.

	PR c++/49568
	* method.c (make_thunk, use_thunk): Copy DECL_COMDAT.

2011-07-05  Jason Merrill  <jason@redhat.com>

	PR c++/48157
	* pt.c (tsubst_qualified_id): Preserve TEMPLATE_ID_EXPR in
	partial instantiation.

	PR c++/49598
	* semantics.c (finish_id_expression): convert_from_reference.

2011-07-05  Richard Guenther  <rguenther@suse.de>

	* decl.c (cxx_init_decl_processing): Defer building common
	tree nodes to c_common_nodes_and_builtins.

2011-07-04  Jason Merrill  <jason@redhat.com>

	DR 1207
	PR c++/49589
	* mangle.c (write_expression): Handle 'this'.
	* parser.c (cp_parser_postfix_dot_deref_expression): Allow
	incomplete *this.
	* semantics.c (potential_constant_expression_1): Check that
	DECL_CONTEXT is set on 'this'.

	* error.c (dump_template_bindings): Don't print typenames
	for a partial instantiation.
	(dump_function_decl): If we aren't printing function arguments,
	print template arguments as <args> rather than [with ...].
	(dump_expr): Don't print return type or template header.
	[BASELINK]: Use BASELINK_FUNCTIONS rather than get_first_fn.
	* pt.c (dependent_template_arg_p): Handle null arg.

	* error.c (type_to_string): Avoid redundant akas.

2011-07-01  Jonathan Wakely  <jwakely.gcc@gmail.com>

	PR c++/49605
	* init.c (build_delete): Only warn for sfk_deleting_destructor.

2011-07-01  Jakub Jelinek  <jakub@redhat.com>

	* Make-lang.in (cp/decl.o): Depend on pointer-set.h.
	(cp/class.o): Likewise.
	(cp/error.o): Likewise.
	(cp/name-lookup.o): Likewise.
	(cp/decl2.o): Likewise.  Don't depend on $(POINTER_SET_H).

2011-07-01  Jason Merrill  <jason@redhat.com>

	PR c++/48261
	* pt.c (lookup_template_function): Handle non-function.

	PR c++/48593
	* pt.c (tsubst_qualified_id): Check PTRMEM_OK_P.
	* tree.c (build_qualified_name): Set PTRMEM_OK_P.
	* semantics.c (finish_parenthesized_expr): Clear PTRMEM_OK_P on
	SCOPE_REF, too.
	* cp-tree.h (PTRMEM_OK_P): Apply to SCOPE_REF, too.
	(QUALIFIED_NAME_IS_TEMPLATE): Switch to lang flag 1.

	PR c++/48883
	PR c++/49609
	* pt.c (resolve_nondeduced_context): Call mark_used.

	PR c++/49085
	* semantics.c (finish_offsetof): Complain about incomplete type.

2011-06-30  Jason Merrill  <jason@redhat.com>

	PR c++/49387
	* rtti.c (get_tinfo_decl): Call complete_type.

	PR c++/49569
	* method.c (implicitly_declare_fn): Set DECL_PARM_LEVEL and
	DECL_PARM_INDEX on rhs parm.

	* pt.c (iterative_hash_template_arg): Use cp_tree_operand_length.

	PR c++/49355
	* tree.c (stabilize_init): Handle aggregate initialization.

	PR c++/48481
	* name-lookup.c (struct arg_lookup): Add fn_set.
	(add_function): Check it.
	(lookup_arg_dependent_1): Initialize it.

2011-06-29  Jason Merrill  <jason@redhat.com>

	PR c++/49216
	* init.c (build_new_1): Pass {} down to build_vec_init.
	(build_vec_init): Handle it.

	DR 1207
	PR c++/49003
	* cp-tree.h (struct saved_scope): Add x_current_class_ptr,
	x_current_class_ref.
	(current_class_ptr, current_class_ref): Use them.
	* decl.c (build_this_parm): Handle getting the class type.
	* parser.c (cp_parser_late_return_type_opt): Set up 'this'
	for use within the trailing return type.

	* pt.c (tsubst_decl) [VAR_DECL]: In unevaluated operand,
	don't tsubst DECL_INITIAL unless our type use auto.

	PR c++/49520
	* semantics.c (constexpr_fn_retval): Handle CLEANUP_POINT_EXPR here.
	(massage_constexpr_body): Not here.

	PR c++/49554
	* semantics.c (lambda_proxy_type): New.
	(build_capture_proxy): Use it.
	* cp-tree.h (DECLTYPE_FOR_LAMBDA_PROXY): New.
	* pt.c (tsubst) [DECLTYPE_TYPE]: Use them.

	PR c++/45923
	* class.c (explain_non_literal_class): New.
	(finalize_literal_type_property): Call it.
	* cp-tree.h: Declare it.
	* semantics.c (ensure_literal_type_for_constexpr_object): Call it.
	(is_valid_constexpr_fn): Likewise.
	(massage_constexpr_body): Split out from...
	(register_constexpr_fundef): ...here.
	(is_instantiation_of_constexpr): New.
	(expand_or_defer_fn_1): Leave DECL_SAVED_TREE alone in that case.
	(explain_invalid_constexpr_fn): New.
	(cxx_eval_call_expression): Call it.
	(potential_constant_expression_1): Likewise.  Avoid redundant errors.
	* method.c (process_subob_fn): Diagnose non-constexpr.
	(walk_field_subobs): Likewise.
	(synthesized_method_walk): Don't shortcut if we want diagnostics.
	(explain_implicit_non_constexpr): New.
	(defaulted_late_check): Use it.
	* call.c (build_cxx_call): Remember location.

	* method.c (maybe_explain_implicit_delete): Use pointer_set
	instead of htab.

	* class.c (finalize_literal_type_property): Update conditions.
	* method.c (defaulted_late_check): Set TYPE_HAS_CONSTEXPR_CTOR.

	* tree.c (build_vec_init_expr): Don't add TARGET_EXPR.
	* typeck2.c (digest_init_r): Handle VEC_INIT_EXPR.
	* semantics.c (cxx_eval_vec_init_1): Correct type.

	* init.c (build_value_init): Decide whether or not to zero-initialize
	based on user-providedness of default ctor, not any ctor.
	(build_value_init_noctor): Adjust assert.

	DR 990
	* call.c (convert_like_real) [ck_user]: Handle value-initialization.
	(build_new_method_call_1): Likewise.
	* init.c (expand_default_init): Handle direct list-initialization
	of aggregates.

2011-06-27  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (union lang_tree_node): Use it in chain_next expression.

2011-06-26  Jason Merrill  <jason@redhat.com>

	PR c++/49528
	* semantics.c (potential_constant_expression_1): Check
	for non-literality rather than cleanup.
	(cxx_eval_constant_expression): Likewise.

	PR c++/49528
	* semantics.c (potential_constant_expression_1): A TARGET_EXPR
	with a cleanup isn't constant.
	(cxx_eval_constant_expression): Likewise.
	* init.c (expand_default_init): Use maybe_constant_init.

2011-06-24  Jakub Jelinek  <jakub@redhat.com>

	PR c++/46400
	* cp-tree.h (union lang_tree_node): Use TYPE_NEXT_VARIANT
	instead of TYPE_CHAIN for chain_next for types.

2011-06-23  Gabriel Charette  <gchare@google.com>

	* name-lookup.h (cp_binding_level): Removed unused
	member names_size. Update all users.

2011-06-23  Jason Merrill  <jason@redhat.com>

	* typeck2.c (build_functional_cast): Strip cv-quals for value init.
	* init.c (build_zero_init_1): Not here.

	PR c++/35255
	* pt.c (resolve_overloaded_unification): Fix DR 115 handling.

2011-06-23  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/44625
	* decl2.c (build_anon_union_vars): Early return error_mark_node
	for a nested anonymous struct.

2011-06-23  Jason Merrill  <jason@redhat.com>

	PR c++/49507
	* decl2.c (mark_used): Don't call synthesize_method for
	functions defaulted outside the class.

	* optimize.c (maybe_clone_body): Set linkage flags before
	cgraph_same_body_alias.

	PR c++/49440
	* class.c (set_linkage_according_to_type): Hand off to
	determine_visibility.

	PR c++/49395
	* init.c (build_zero_init_1): Strip cv-quals from scalar types.

	PR c++/36435
	* pt.c (most_specialized_instantiation): Do check return types.

2011-06-22  Jason Merrill  <jason@redhat.com>

	PR c++/49260
	* call.c (build_call_a): Set cp_function_chain->can_throw here.
	(build_cxx_call): Not here.

2011-06-21  Jason Merrill  <jason@redhat.com>

	PR c++/49172
	* decl.c (cp_finish_decl): Adjust init_const_expr_p for refs.
	(grokdeclarator): constexpr doesn't apply const for refs.
	* parser.c (cp_parser_initializer_clause): Don't call
	maybe_constant_value here.
	* call.c (initialize_reference): Handle constexpr.

	PR c++/49482
	* semantics.c (maybe_add_lambda_conv_op): Call mark_exp_read for
	static fn parameters.

	* call.c (add_builtin_candidates): Use cv_unqualified rather than
	TYPE_MAIN_VARIANT.
	* pt.c (tsubst_arg_types): Likewise.
	* except.c (build_throw): Use cv_unqualified.

	PR c++/49418
	* call.c (cxx_type_promotes_to): Don't strip cv-quals.
	* semantics.c (lambda_return_type): Strip them here.

2011-06-21  Andrew MacLeod  <amacleod@redhat.com>

	* semantics.c: Add sync_ or SYNC__ to builtin names.

2011-06-20  Jason Merrill  <jason@redhat.com>

	PR c++/49216
	* init.c (build_vec_init): Don't try to use a CONSTRUCTOR when
	base is a pointer.
	* typeck2.c (process_init_constructor_array): Use {} for classes,
	too.
	* call.c (convert_like_real): Handle substitution failure.

	PR c++/48138
	* pt.c (canonicalize_type_argument): New.
	(convert_template_argument, unify): Use it.

	PR c++/47080
	* call.c (rejection_reason_code): Add rr_explicit_conversion.
	(print_z_candidate): Handle it.
	(explicit_conversion_rejection): New.
	(build_user_type_conversion_1): Reject an explicit conversion
	function that requires more than a qualification conversion.

	PR c++/47635
	* decl.c (grokdeclarator): Don't set ctype to an ENUMERAL_TYPE.

	PR c++/48138
	* tree.c (strip_typedefs): Use build_aligned_type.

	PR c++/49205
	* call.c (sufficient_parms_p): Allow parameter packs too.

	PR c++/43321
	* semantics.c (describable_type): Remove.
	* cp-tree.h: Likewise.
	* decl.c (cp_finish_decl): Don't call it.
	* init.c (build_new): Likewise.
	* parser.c (cp_parser_omp_for_loop): Likewise.
	* pt.c (tsubst_decl): Likewise.
	(do_auto_deduction): If we fail in a template, try again
	at instantiation time.

	PR c++/43831
	* parser.c (cp_parser_lambda_introducer): Complain about redundant
	captures.
	* semantics.c (add_capture): Likewise.
	(register_capture_members): Clear IDENTIFIER_MARKED.

2011-06-17  Jason Merrill  <jason@redhat.com>

	PR c++/49458
	* call.c (convert_class_to_reference_1): Allow binding function
	lvalue to rvalue reference.

	PR c++/43912
	Generate proxy VAR_DECLs for better lambda debug info.
	* cp-tree.h (FUNCTION_NEEDS_BODY_BLOCK): Add lambda operator().
	(LAMBDA_EXPR_PENDING_PROXIES): New.
	(struct tree_lambda_expr): Add pending_proxies.
	* name-lookup.c (pushdecl_maybe_friend_1): Handle capture shadowing.
	(qualify_lookup): Use is_lambda_ignored_entity.
	* parser.c (cp_parser_lambda_expression): Don't adjust field names.
	Call insert_pending_capture_proxies.
	(cp_parser_lambda_introducer): Use this_identifier.
	(cp_parser_lambda_declarator_opt): Call the object parameter
	of the op() "__closure" instead of "this".
	(cp_parser_lambda_body): Call build_capture_proxy.
	* semantics.c (build_capture_proxy, is_lambda_ignored_entity): New.
	(insert_pending_capture_proxies, insert_capture_proxy): New.
	(is_normal_capture_proxy, is_capture_proxy): New.
	(add_capture): Add __ to field names here, return capture proxy.
	(add_default_capture): Use this_identifier, adjust to expect
	add_capture to return a capture proxy.
	(outer_lambda_capture_p, thisify_lambda_field): Remove.
	(finish_id_expression, lambda_expr_this_capture): Adjust.
	(build_lambda_expr): Initialize LAMBDA_EXPR_PENDING_PROXIES.
	* pt.c (tsubst_copy_and_build): Check that LAMBDA_EXPR_PENDING_PROXIES
	is null.

	* name-lookup.c (pushdecl_maybe_friend_1): Do check for shadowing
	of artificial locals.

	* parser.c (cp_parser_lambda_expression): Clear
	LAMBDA_EXPR_THIS_CAPTURE after parsing.
	* pt.c (tsubst_copy_and_build): Make sure it isn't set.

	* cp-tree.h (struct tree_lambda_expr): Change common to typed.
	Move non-pointers to end of struct.

	* pt.c (tsubst_decl): Handle DECL_VALUE_EXPR on reference.
	* decl.c (check_initializer): Handle DECL_VALUE_EXPR_P.

	* semantics.c (finish_non_static_data_member): Preserve dereference
	in template.

2011-06-16  Jason Merrill  <jason@redhat.com>

	PR c++/44160
	* parser.c (cp_parser_lambda_body): Share code between
	simple and complex cases instead of using cp_parser_function_body.

	PR c++/45378
	* decl.c (check_initializer): Check narrowing.

	PR c++/49229
	* pt.c (tsubst_decl) [FUNCTION_DECL]: Handle substitution failure.

	PR c++/49251
	* semantics.c (finish_id_expression): Mark even dependent
	variables as used.

	PR c++/49420
	* error.c (dump_template_argument): Don't try to omit default
	template args from an argument pack.

2011-06-15  H.J. Lu  <hongjiu.lu@intel.com>

	PR c++/49412
	* decl.c (get_dso_handle_node): Mark __dso_handle hidden if
	assembler supports hidden visibility.

2011-06-14  Jason Merrill  <jason@redhat.com>

	PR c++/49107
	* cp-tree.h (DEFERRED_NOEXCEPT_SPEC_P): Handle overload.
	* method.c (defaulted_late_check): Only maybe_instantiate_noexcept
	if the declaration had an exception-specifier.
	(process_subob_fn): Don't maybe_instantiate_noexcept.
	* pt.c (maybe_instantiate_noexcept): Handle overload.
	* typeck2.c (nothrow_spec_p_uninst): New.
	(merge_exception_specifiers): Add 'fn' parm.  Build up overload.
	* typeck.c (merge_types): Adjust.

	* pt.c (deduction_tsubst_fntype): Don't save input_location.
	(maybe_instantiate_noexcept): Likewise.

2011-06-14  Joseph Myers  <joseph@codesourcery.com>

	* Make-lang.in (cp/method.o): Update dependencies.
	* method.c: Include common/common-target.h.
	(use_thunk): Use targetm_common.have_named_sections.

2011-06-14  Steve Ellcey  <sje@cup.hp.com>

	* decl.c (cxx_init_decl_processing): Use ptr_mode instead of Pmode.

2011-06-14  Jason Merrill  <jason@redhat.com>

	* error.c (type_to_string): Print typedef-stripped version too.

	PR c++/49117
	* call.c (perform_implicit_conversion_flags): Print source type as
	well as expression.

	PR c++/49389
	* typeck2.c (build_m_component_ref): Preserve rvalueness.

	PR c++/49369
	* class.c (build_base_path): Fix cv-quals in unevaluated context.

	PR c++/49290
	* semantics.c (cxx_fold_indirect_ref): Local, more permissive copy
	of fold_indirect_ref_1.
	(cxx_eval_indirect_ref): Use it.

2011-06-11  Jan Hubicka  <jh@suse.cz>

	* decl2.c (cp_write_global_declarations): Process aliases; look trhough
	same body aliases.

2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/41769
	* decl.c (grokdeclarator): Reject operator names in parameters.

2011-06-10  Jan Hubicka  <jh@suse.cz>

	* decl2.c (clear_decl_external): New functoin.
	(cp_write_global_declarations): Use it.

2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>

	* cp-tree.h (error_operand_p): Remove.

2011-06-09  David Krauss  <potswa@mac.com>

	PR c++/49118
	* typeck2.c (build_x_arrow): Push fake template context
	to produce diagnostic on acyclic endless operator-> drill-down.
	* call.c (build_new_op): Change Boolean overload status
	value to a pointer to the overload function.
	* cp-tree.h: Likewise.
	* typeck.c: Likewise.
	* parser.c: Likewise.
	* decl2.c: Likewise.
	* pt.c: Likewise.

2011-06-09  Jason Merrill  <jason@redhat.com>

	* semantics.c (maybe_constant_value): Handle overflowed input.
	(non_const_var_error): Handle non-constant DECL_INITIAL.

	* pt.c (build_non_dependent_expr): Use fold_non_dependent_expr_sfinae.

	* parser.c (cp_parser_constant_expression): Just return the
	non-constant expression.

	* semantics.c (finish_compound_literal): Set TREE_HAS_CONSTRUCTOR.

2011-06-09  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/29003
	* decl.c (grokdeclarator): Reject operator names in typedefs.

2011-06-08  Jason Merrill  <jason@redhat.com>

	PR c++/49107
	* cp-tree.def (DEFERRED_NOEXCEPT): New.
	* cp-tree.h (struct tree_deferred_noexcept): New.
	(DEFERRED_NOEXCEPT_PATTERN, DEFERRED_NOEXCEPT_ARGS): New.
	(DEFERRED_NOEXCEPT_SPEC_P): New.
	(enum cp_tree_node_structure_enum): Add TS_CP_DEFERRED_NOEXCEPT.
	(union lang_tree_node): Add tree_deferred_noexcept.
	(maybe_instantiate_noexcept): Declare.
	* cp-objcp-common.c (cp_tree_size): Handle DEFERRED_NOEXCEPT.
	* error.c (dump_exception_spec): Likewise.
	* cxx-pretty-print.c (pp_cxx_exception_specification): Likewise.
	* ptree.c (cxx_print_xnode): Likewise.
	* tree.c (cp_tree_equal): Likewise.
	* decl.c (cp_tree_node_structure): Likewise.
	(duplicate_decls): Call maybe_instantiate_noexcept.
	* except.c (build_noexcept_spec): Handle DEFERRED_NOEXCEPT.
	(nothrow_spec_p, type_noexcept_p, type_throw_all_p): Check
	DEFERRED_NOEXCEPT_SPEC_P.
	* typeck2.c (merge_exception_specifiers): Likewise.
	* decl2.c (mark_used): Call maybe_instantiate_noexcept.
	* method.c (process_subob_fn, defaulted_late_check): Likewise.
	* pt.c (tsubst_exception_specification): Add defer_ok parm.
	Build DEFERRED_NOEXCEPT.
	(maybe_instantiate_noexcept): New.
	(tsubst, regenerate_decl_from_template, instantiate_decl): Adjust.
	* search.c (check_final_overrider): Call maybe_instantiate_noexcept.

	* semantics.c (potential_constant_expression_1): Handle destructor
	call.

2011-06-08  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (struct tinst_level): Add chain_next GTY
	markup.

2011-06-08  Jason Merrill  <jason@redhat.com>

	PR c++/49322
	* pt.c (deduction_tsubst_fntype): Don't free the tinst entry
	if a pending_template entry is pointing at it.

2011-06-07  Jason Merrill  <jason@redhat.com>

	PR c++/48969
	PR c++/44175
	* error.c (subst_to_string): New.
	(cp_printer): Use it for 'S'.
	(print_instantiation_partial_context_line): Handle subst context.
	* pt.c (push_tinst_level): Handle subst context.
	(deduction_tsubst_fntype): Don't track specific substitutions.
	Use push_tinst_level.

	* pt.c (deduction_tsubst_fntype): Use push_deduction_access_scope.
	(fn_type_unification): Don't call push_deduction_access_scope here.

2011-06-06  Jason Merrill  <jason@redhat.com>

	PR c++/48780
	* typeck.c (perform_integral_promotions): Don't promote scoped enums.
	* call.c (convert_arg_to_ellipsis): Promote them here in old ABI.

2011-06-06  Nicola Pero  <nicola.pero@meta-innovation.com>,

	PR obj-c++/48275
	* parser.c (cp_parser_objc_at_property_declaration): Allow setter
	and getter names to use all the allowed method names.

2011-06-06  Jason Merrill  <jason@redhat.com>

	PR c++/49298
	* semantics.c (potential_constant_expression_1): Handle FIELD_DECL.

	PR objc++/49221
	* decl.c (cp_finish_decl): Check DECL_FUNCTION_SCOPE_P rather than
	at_function_scope_p.

	PR c++/49134
	* tree.c (build_target_expr): Deal with ARM ABI tweaks.

2011-06-04  Jonathan Wakely  <jwakely.gcc@gmail.com>

	* init.c (build_delete): Warn when deleting type with non-virtual
	destructor.

2011-06-03  Jakub Jelinek  <jakub@redhat.com>

	PR c++/49276
	* mangle.c (write_nested_name): Use CP_DECL_CONTEXT instead of
	DECL_CONTEXT.

2011-06-01  Jason Merrill  <jason@redhat.com>

	* pt.c (build_non_dependent_expr): Remove special handling of
	REFERENCE_REF_P.

	PR c++/44175
	* pt.c (template_args_equal): Handle one arg being NULL_TREE.
	(deduction_tsubst_fntype): Handle excessive non-infinite recursion.

	PR c++/49253
	* typeck2.c (build_x_arrow): Don't use build_min_nt.

2010-05-31  Fabien Chêne  <fabien@gcc.gnu.org>

	PR c++/48010
	* name-lookup.c (supplement_binding_1): If the old binding was a
	type name, also check that the DECL actually refers to the same
	type or is not a type.

2011-05-31  Jason Merrill  <jason@redhat.com>

	PR c++/44870
	* tree.c (lvalue_kind): Recurse on NON_DEPENDENT_EXPR.  Handle
	ARROW_EXPR, TYPEID_EXPR, and arbitrary class-valued expressions.
	(build_min_non_dep): Preserve reference refs.
	(build_min_non_dep_call_vec): Likewise

2011-05-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/49223
	* semantics.c (finish_omp_clauses): Call require_complete_type
	even for copyin/copyprivate clauses.  Only call
	cxx_omp_create_clause_info if inner_type is COMPLETE_TYPE_P.

2011-05-28  Jason Merrill  <jason@redhat.com>

	PR c++/46124
	* parser.c (cp_parser_lambda_expression): Improve error recovery.
	(cp_parser_lambda_declarator_opt): Likewise.  Return bool.

2011-05-27  Jason Merrill  <jason@redhat.com>

	PR c++/47277
	* parser.c (cp_parser_pseudo_destructor_name): Commit to parse
	after we see the ~.

	* mangle.c (mangle_decl_string): Make sure we don't try to mangle
	templates.

	PR c++/47049
	* semantics.c (maybe_add_lambda_conv_op): Fix COMDAT sharing.
	* decl.c (start_preparsed_function): Don't call comdat_linkage for
	a template.

	PR c++/47132
	* mangle.c (write_expression): Handle MODOP_EXPR.

	PR c++/47277
	* parser.c (cp_parser_unqualified_id): Don't check
	constructor_name_p for enums.

	PR c++/47687
	* pt.c (dependent_type_p_r): Avoid infinite recursion.

	PR c++/48284
	* error.c (dump_expr) [COMPONENT_REF]: Use pp_cxx_dot
	with INDIRECT_REF of REFERENCE_TYPE.

	PR c++/49181
	* pt.c (get_mostly_instantiated_function_type): Use push_access_scope.

2011-05-27  Nathan Froyd  <froydnj@codesourcery.com>

	* cp-tree.h (building_stmt_tree): Delete.
	* decl.c (save_function_data): Tweak initializer for x_cur_stmt_list.
	(build_aggr_init_full_exprs): Call building_stmt_list_p
	instead of building_stmt_tree.
	(initialize_local_var): Likewise.
	(finish_function): Likewise.
	* decl2.c (finish_anon_union): Likewise.
	* init.c (begin_init_stmts): Likewise.
	(finish_init_stmts): Likewise.
	(expand_aggr_init_1): Likewise.
	* name-lookup.c (do_local_using_decl): Likewise.
	(do_namespace_alias): Likewise.
	(do_using_directive): Likewise.
	(cp_emit_debug_info_for_using): Likewise.
	* semantics.c (add_stmt): Assert that stmt_list_stack is non-empty.

2011-05-27  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/42056
	* typeck2.c (build_functional_cast): Complain early for invalid uses
	of 'auto' and set type to error_mark_node.

2011-05-26  Jason Merrill  <jason@redhat.com>

	PR c++/47721
	* parser.c (cp_parser_member_declaration): Allow friend T.
	* friend.c (make_friend_class): Ignore non-classes.
	* pt.c (instantiate_class_template_1): Handle TEMPLATE_TYPE_PARM.

	DR 1004
	* pt.c (convert_template_argument): Don't complain about using
	injected-class-name as template template argument.

	PR c++/47956
	* decl.c (check_static_variable_definition): Now static.
	(cp_finish_decl): Call it here.
	(grokdeclarator): Not here.
	* pt.c (instantiate_class_template_1): Or here.
	* cp-tree.h: Don't declare it.

2011-05-26  Janis Johnson  <janis187@us.ibm.com>
	    Nathan Froyd  <froydnj@codesourcery.com>

	PR c++/2288
	PR c++/18770
	* name-lookup.h (enum scope_kind): Add sk_cond.
	* name-lookup.c (pushdecl_maybe_friend): Get scope of shadowed local.
	Detect and report error for redeclaration from for-init or if
	or switch condition.
	(begin_scope): Handle sk_cond.
	* semantics.c (begin_if_stmt): Use sk_cond.
	(begin switch_stmt): Ditto.

2011-05-26  Jason Merrill  <jason@redhat.com>

	PR c++/48211
	* name-lookup.h (cp_class_binding): Make base a pointer.
	* name-lookup.c (new_class_binding): Adjust.
	(poplevel_class): Adjust.

	PR c++/48424
	* decl.c (grokparms): Function parameter packs don't need to
	go at the end.
	* pt.c (type_unification_real): But they aren't deduced otherwise.

2011-05-25  Jason Merrill  <jason@redhat.com>

	PR c++/48536
	* decl.c (build_enumerator): If incremented enumerator won't fit in
	previous integral type, find one it will fit in.

	PR c++/48599
	* decl.c (create_array_type_for_decl): Complain about array of auto.

	PR c++/44994
	PR c++/49156
	* error.c (dump_template_bindings): Set processing_template_decl
	for a partial instantiation.

	PR c++/45401
	* decl.c (grokdeclarator): Don't change type when adding rvalue ref
	to another reference type.

	PR c++/44311
	* decl.c (case_conversion): New.
	(finish_case_label): Use it.

	* ptree.c (cxx_print_xnode): Handle ARGUMENT_PACK_SELECT.

	PR c++/45698
	* pt.c (dependent_template_arg_p): See through ARGUMENT_PACK_SELECT.

	PR c++/46005
	* decl.c (grokdeclarator): Complain about auto typedef.

	PR c++/46245
	* decl.c (grokdeclarator): Complain later for auto parameter.
	* pt.c (splice_late_return_type): Handle use in a template
	type-parameter.

	PR c++/46696
	* typeck.c (cp_build_modify_expr): Check DECL_DEFAULTED_FN.

	PR c++/47184
	* parser.c (cp_parser_parameter_declaration): Recognize
	list-initialization.
	(cp_parser_direct_declarator): Check for the closing
	paren before parsing definitely.

	PR c++/48935
	* parser.c (cp_parser_constructor_declarator_p): Don't check
	constructor_name_p for enums.
	(cp_parser_diagnose_invalid_type_name): Correct error message.

	PR c++/45418
	* init.c (perform_member_init): Handle list-initialization
	of array of non-trivial class type.

	PR c++/45080
	* pt.c (instantiate_class_template_1): Call maybe_add_lambda_conv_op.
	* semantics.c (lambda_function): Check COMPLETE_OR_OPEN_TYPE_P.

	PR c++/48292
	* pt.c (tsubst_decl) [PARM_DECL]: Handle partial instantiation of
	function parameter pack.
	(tsubst_pack_expansion): Likewise.

	* cp-objcp-common.c (cp_common_init_ts): TYPE_ARGUMENT_PACK has
	TS_COMMON.

2011-05-25  Jakub Jelinek  <jakub@redhat.com>

	* cp-objcp-common.c (cp_common_init_ts): Mark CTOR_INITIALIZER
	as TS_TYPED.

	PR c++/49136
	* semantics.c (cxx_eval_bit_field_ref): Handle the
	case when BIT_FIELD_REF doesn't cover only a single field.

2011-05-24  Jason Merrill  <jason@redhat.com>

	PR c++/49042
	* pt.c (get_mostly_instantiated_function_type): Use
	push_deferring_access_checks rather than set flag_access_control.

2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>,

	* parser.c (cp_parser_objc_class_ivars): Deal gracefully with a
	syntax error in declaring an ObjC instance variable.

2011-05-24  Jason Merrill  <jason@redhat.com>

	PR c++/48884
	* class.c (pushclass): Accept NULL argument.
	(popclass): Deal with popping null class.
	* pt.c (push_access_scope, pop_access_scope): Use them rather than
	push_to_top_level/pop_from_top_level.
	(push_deduction_access_scope, pop_defarg_context): New.
	(fn_type_unification): Use them.
	* name-lookup.c (lookup_name_real_1): Check current_class_type.

2011-05-24  Paolo Carlini  <paolo.carlini@oracle.com>

	* decl.c (grokdeclarator): Use current_class_name.

2011-05-24  Joseph Myers  <joseph@codesourcery.com>

	* Make-lang.in (GXX_OBJS): Remove prefix.o.
	(g++$(exeext)): Use libcommon-target.a.
	(CXX_C_OBJS): Remove prefix.o.

2011-05-23  Jason Merrill  <jason@redhat.com>

	* pt.c (tsubst_copy_and_build): Use current_class_name.

	PR c++/49102
	* call.c (convert_arg_to_ellipsis): Call force_rvalue.

	PR c++/49105
	* typeck.c (cp_build_c_cast): Don't strip cv-quals when
	converting to reference.
	(build_static_cast_1): Update for glvalues.

	PR c++/49105
	* typeck.c (build_const_cast_1): Handle rvalue references.

	PR c++/47263
	* decl.c (use_eh_spec_block): Do use an EH spec block for a
	lambda op().

	PR c++/49058
	* call.c (splice_viable): Be strict in templates.

	PR c++/47336
	* error.c (dump_template_bindings): Suppress access control.

	PR c++/47544
	* pt.c (instantiate_decl): Handle =default.

	PR c++/48617
	* pt.c (invalid_nontype_parm_type_p): Allow DECLTYPE_TYPE.

2011-05-23  Nathan Froyd  <froydnj@codesourcery.com>

	* call.c (build_over_call): Tweak call to check_function_arguments.
	* typeck.c (cp_build_function_call_vec): Likewise.

2011-05-23  Jonathan Wakely  <jwakely.gcc@gmail.com>

	PR c++/18016
	* init.c (perform_member_init): Check for self-initialization.

2011-05-22  Jason Merrill  <jason@redhat.com>

	PR c++/48647
	* typeck.c (composite_pointer_type_r): Return error_mark_node
	on error in SFINAE context.

2011-05-20  Jason Merrill  <jason@redhat.com>

	PR c++/48945
	* decl.c (grokdeclarator): Don't add set const function-cv-qual
	for constexpr fns to memfn_quals, just add it to the type.
	(revert_static_member_fn): Don't complain about quals.
	(check_static_quals): New.
	(grokfndecl): Call it.
	(start_preparsed_function): Don't call revert_static_member_fn.

	PR c++/48945
	* decl.c (revert_static_member_fn): Ignore const on constexpr fn.

	PR c++/48780
	* cvt.c (type_promotes_to): Don't promote scoped enums.

	PR c++/49066
	* decl.c (duplicate_decls): Preserve DECL_DELETED_FN.

	PR c++/48873
	* tree.c (stabilize_expr): Fix typo.

	DR 1073
	PR c++/49082
	* typeck.c (comp_except_specs): noexcept(false) is not compatible
	with throw(type-list).
	* typeck2.c (merge_exception_specifiers): noexcept(false)
	beats any more limited specification.

	PR c++/24163
	PR c++/29131
	* pt.c (tsubst_copy_and_build) [CALL_EXPR]: Avoid repeating
	unqualified lookup.
	* semantics.c (perform_koenig_lookup): Add complain parm.
	* cp-tree.h: Adjust.
	* parser.c (cp_parser_postfix_expression): Adjust.
	(cp_parser_perform_range_for_lookup): Adjust.

2011-05-20  Jason Merrill  <jason@redhat.com>

	* semantics.c (finish_call_expr): SET_EXPR_LOCATION.

2011-05-20  Joseph Myers  <joseph@codesourcery.com>

	* Make-lang.in (GXX_OBJS): Remove intl.o and version.o.

2011-05-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/49043
	* decl.c (check_omp_return): Stop searching on sk_function_parms.

	PR c++/48869
	* method.c (get_dtor, get_copy_ctor): Add COMPLAIN argument,
	pass it down to locate_fn_flags.
	* cp-tree.h (get_dtor, get_copy_ctor): Adjust prototypes.
	* semantics.c (cxx_omp_create_clause_info): Adjust callers.
	* cp-gimplify.c: Include splay-tree.h.
	(splay_tree_compare_decl_uid, omp_var_to_track,
	omp_cxx_notice_variable): New functions.
	(struct cp_genericize_omp_taskreg): New type.
	(struct cp_genericize_data): Add omp_ctx field.
	(cp_genericize_r): Attempt to determine implicitly determined
	firstprivate class type variables.
	(cp_genericize): Clear omp_ctx.
	* Make-lang.in (cp/cp-gimplify.o): Depend on $(SPLAY_TREE_H).

2011-05-18  Jason Merrill  <jason@redhat.com>

	PR c++/48948
	PR c++/49015
	* class.c (finalize_literal_type_property): Do check
	for constexpr member functions of non-literal class.
	(finish_struct): Don't call check_deferred_constexpr_decls.
	* cp-tree.h: Don't declare it.
	(DECL_DEFERRED_CONSTEXPR_CHECK): Remove.
	* decl.c (grok_special_member_properties): Don't check it
	(grokfnedcl): Don't call validate_constexpr_fundecl.
	(start_preparsed_function): Do call it.
	* pt.c (tsubst_decl): Don't call it.
	(instantiate_class_template_1): Don't call
	check_deferred_constexpr_decls.
	* semantics.c (literal_type_p): Check for any incompleteness.
	(ensure_literal_type_for_constexpr_object): Likewise.
	(is_valid_constexpr_fn): Revert deferral changes.
	(validate_constexpr_fundecl): Likewise.
	(register_constexpr_fundef): Likewise.
	(check_deferred_constexpr_decls): Remove.

2011-05-16  Jason Merrill  <jason@redhat.com>

	PR c++/48969
	* pt.c (deduction_tsubst_fntype): Use a VEC initially.

2011-05-15  Paolo Carlini  <paolo.carlini@oracle.com>

	* cxx-pretty-print.c: Update comment.
	* semantics.c (trait_expr_value, finish_trait_expr):
	Reorder the cases.
	* parser.c (cp_parser_primary_expression): Likewise.

2011-05-15  Jonathan Wakely  <jwakely.gcc@gmail.com>

	PR c++/48994
	* parser.c (cp_parser_perform_range_for_lookup): Call complete_type.

2011-05-13  Ville Voutilainen  <ville.voutilainen@gmail.com>

	Implement final on class.
	* class.c (check_bases): Diagnose derivation from a final class.
	* cp-tree.h (lang_type_class): Add is_final and adjust dummy.
	(CLASSTYPE_FINAL): New.
	* parser.c (cp_parser_class_head): Parse class-virt-specifier, set
	CLASSTYPE_FINAL.
	* pt.c (instantiate_class_template_1): Copy CLASSTYPE_FINAL.

2011-05-13  Jason Merrill  <jason@redhat.com>

	PR c++/48969
	* pt.c (deduction_tsubst_fntype): New.
	(fn_type_unification): Use it.
	(init_template_processing): Initialize hash table.
	(print_template_statistics): Print hash table stats.

	* call.c (build_op_call): Use timevar_cond_start/stop.
	(build_user_type_conversion): Likewise.

2011-05-12  Jason Merrill  <jason@redhat.com>

	* cp-tree.h (DECL_DEFERRED_CONSTEXPR_CHECK): New.
	* semantics.c (validate_constexpr_fundecl): Set it.
	(check_deferred_constexpr_decls): Clear it.
	(register_constexpr_fundef): Make sure it isn't set.
	* decl.c (grok_special_member_properties): Check it.

2011-05-11  Jason Merrill  <jason@redhat.com>

	PR c++/48948
	* semantics.c (validate_constexpr_fundecl): Defer checking if
	an argument type is being defined.
	(is_valid_constexpr_fn): Add defer_ok parm.
	(cxx_eval_call_expression): Adjust.
	(check_deferred_constexpr_decls): New.
	(literal_type_p): Make sure type isn't being defined.
	(ensure_literal_type_for_constexpr_object): Handle type being defined.
	* cp-tree.h: Declare check_deferred_constexpr_decls.
	* decl.c (grokfndecl): Call validate_constexpr_fundecl here.
	(start_preparsed_function, cp_finish_decl): Not here.
	* class.c (finalize_literal_type_property): Don't call
	validate_constexpr_fundecl.
	(finish_struct): Call check_deferred_constexpr_decls.
	* pt.c (tsubst_decl): Call validate_constexpr_fundecl.
	(instantiate_class_template): Call check_deferred_constexpr_decls.

	* semantics.c (validate_constexpr_fundecl): Check DECL_TEMPLATE_INFO
	rather than DECL_TEMPLATE_INSTANTIATION.
	(cxx_eval_call_expression): Likewise.

	* semantics.c (register_constexpr_fundef): Add to hash table here.
	(validate_constexpr_fundecl): Not here.

	* decl.c (grokdeclarator): Only set DECL_DECLARED_CONSTEXPR_P once.

	* pt.c (build_non_dependent_expr): Don't check null_ptr_cst_p,
	do call maybe_constant_value in C++0x mode.
	* semantics.c (cxx_eval_constant_expression): Handle TEMPLATE_DECL.

	PR c++/48745
	* pt.c (value_dependent_expr_p): Handle CONSTRUCTOR.

2011-05-11  Nathan Froyd  <froydnj@codesourcery.com>

	* cp-tree.h (TYPENAME_TYPE_FULLNAME, TYPEOF_TYPE_EXPR): Use
	TYPE_VALUES_RAW.
	(UNDERLYING_TYPE_TYPE, DECLTYPE_TYPE_EXPR): Likewise.
	(DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P): Likewise.
	(TEMPLATE_TYPE_PARM_INDEX): Likewise.

2011-05-10  Jason Merrill  <jason@redhat.com>

	PR c++/48930
	* class.c (type_build_ctor_call): New.
	* cp-tree.h: Declare it.
	* decl.c (check_initializer): Use it instead of
	TYPE_NEEDS_CONSTRUCTING.
	* init.c (build_value_init, build_value_init_noctor): Likewise.
	(perform_member_init, expand_aggr_init_1, build_new_1): Likewise.
	(build_vec_init): Likewise.
	* typeck2.c (process_init_constructor_array): Likewise.
	(process_init_constructor_record): Likewise.

	PR c++/48736
	* pt.c (tsubst_copy_and_build): Handle substitution of a pack
	expansion producing another expansion.

2011-05-10  Ville Voutilainen  <ville.voutilainen@gmail.com>

	Fixes for override/final.
	* class.c (check_for_override): Diagnose final on a nonvirtual
	member function, diagnose override for a virtual with no matching
	override. Don't fiddle around with DECL_VINDEX.

2011-05-10  Nathan Froyd  <froydnj@codesourcery.com>

        * cp-tree.def (EXPR_PACK_EXPANSION): Add an operand.
        * cp-objcp-common.c (cp_common_init_ts): Mark it as TS_TYPED.
        * cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS): Use the new
        operand of EXPR_PACK_EXPANSION.
	(cp_tree_operand_length): Declare.
        * tree.c (cp_tree_operand_length): Define.
	(cp_tree_equal): Call it.
        * pt.c (value_dependent_expr_P): Likewise.
        * mangle.c (write_expression): Likewise.

2011-05-09  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/48737
	PR c++/48744
	* decl.c (reshape_init): Take a complain parameter and do
	not call error if tf_error is not set.
	(check_initializer, reshape_init_r, reshape_init_array,
	reshape_init_array_1, reshape_init_vector, reshape_init_class):
	Adjust.
	* typeck2.c (digest_init_r): Take a complain parameter and
	pass it to convert_for_initialization.
	(digest_init, digest_init_flags, process_init_constructor_array,
	process_init_constructor_record, process_init_constructor_union,
	process_init_constructor, digest_init_r): Adjust.
	* init.c (expand_default_init, build_new_1): Likewise.
	* typeck.c (cp_build_modify_expr): Likewise.
	* decl2.c (grokfield): Likewise.
	* call.c (convert_like_real, convert_default_arg): Likewise.
	* semantics.c (finish_compound_literal): Pass complain to
	reshape_init and digest_init.
	* cp-tree.h: Adjust declarations.

2011-05-07  Fabien Chêne  <fabien@gcc.gnu.org>

	PR c++/48859
	* init.c (diagnose_uninitialized_cst_or_ref_member_1): stop the
	recursion if there is user defined constructor.

2011-05-09  Jason Merrill  <jason@redhat.com>

	PR c++/34772
	* decl.c (initialize_local_var): Use DECL_INITIAL for simple
	initialization.

2011-05-08  Ville Voutilainen  <ville.voutilainen@gmail.com>

	Implement final/override for member functions.
	* class.c (check_for_override): Check for DECL_OVERRIDE_P.
	* cp-tree.h (DECL_OVERRIDE_P, DECL_FINAL_P): New.
	(cp_virt_specifiers, enum virt_specifier): New.
	* decl.c (set_virt_specifiers): New.
	(grokdeclarator): Use them. Diagnose virt-specifiers on non-fields.
	* parser.c (make_call_declarator): add virt-specifiers parameter.
	(cp_parser_lambda_declarator_opt): Adjust.
	(cp_parser_direct_declarator): Likewise.
	(cp_parser_virt_specifier_seq_opt): New.
	* search.c (check_final_overrider): Diagnose attempts to override
	a final member function.

2011-05-09  Dodji Seketeli  <dodji@redhat.com>

	PR c++/48574
	* class.c (fixed_type_or_null): Use type_dependent_p_push to test
	if the instance has a dependent initializer.

2011-05-08  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/48816
	* cxx-pretty-print.c (pp_cxx_template_declaration): Remove
	effectively unused variable.

2011-05-07  Eric Botcazou  <ebotcazou@adacore.com>

	* name-lookup.h (global_bindings_p): Adjust prototype.
	* name-lookup.c (global_bindings_p): Return bool.

2011-05-06  Jason Merrill  <jason@redhat.com>

	* decl.c (stabilize_save_expr_r): Set *walk_subtrees as
	appropriate.

	PR c++/48909
	* semantics.c (cxx_eval_conditional_expression): Check
	integer_zerop instead.
	(potential_constant_expression_1): Likewise.

	PR c++/48911
	* semantics.c (cxx_eval_array_reference): Handle implicit
	initializers.

2011-05-06  Nathan Froyd  <froydnj@codesourcery.com>

	* cp-tree.h (type_of_this_parm, class_of_this_parm): New functions.
	* call.c (standard_conversion): Call class_of_this_parm.
	* cxx-pretty-print.c (pp_cxx_implicit_parameter_type): Likewise.
	(pp_cxx_direct_abstract_declarator): Likewise.
	* decl2.c (change_return_type): Likewise.
	(cp_reconstruct_complex_type): Likewise.
	* error.c (dump_type_suffix, dump_function_decl): Likewise.
	* mangle.c (write_function_type): Likewise.
	* pt.c (unify): Likewise.
	* typeck.c (merge_types, type_memfn_quals): Likewise.
	* decl.c (build_this_parm): Call type_of_this_parm.

2011-05-06  Dodji Seketeli  <dodji@redhat.com>

	PR c++/48838
	* cp-tree.h (non_static_member_function_p): Declare new function.
	* tree.c (non_static_member_function_p): Define it.
	* semantics.c (finish_call_expr): Use it.

2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>

	* decl.c (finish_case_label): Omit the loc argument to
	build_case_label.

2011-05-05  Jason Merrill  <jason@redhat.com>

	* cp-tree.h (REFERENCE_REF_P): Just check the type.
	* cvt.c (convert_from_reference): Adjust.
	* pt.c (build_non_dependent_expr): Adjust.
	* semantics.c (finish_offsetof): Adjust.
	* tree.c (lvalue_kind): Use it.

	PR c++/48873
	* tree.c (stabilize_expr): Don't make gratuitous copies of classes.

2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>

	* decl.c (start_preparsed_function): Do not set
	dont_save_pending_sizes_p.

2011-05-05  Joseph Myers  <joseph@codesourcery.com>

	* parser.c (cp_parser_objc_method_definition_list): Update call to
	objc_start_method_definition.

2011-05-04  Jason Merrill  <jason@redhat.com>

	PR c++/48749
	* class.c (resolves_to_fixed_type_p): Don't look closely
	in templates.

2011-05-03  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/28501
	* call.c (add_builtin_candidate): Handle REALPART_EXPR and
	IMAGPART_EXPR.

2011-05-02  Lawrence Crowl  <crowl@google.com>

	* decl.c: (push_local_name): Change TV_NAME_LOOKUP to start/stop.
	(poplevel): Refactor POP_TIMEVAR_AND_RETURN to plain code.
	Change TV_NAME_LOOKUP to start/stop.
	(define_label): Refactor timevar calls out to a wrapper function.
	Change TV_NAME_LOOKUP to start/stop.
	(xref_tag): Likewise.
	(lookup_label): Refactor timevar calls out to a wrapper function.
	Change TV_NAME_LOOKUP to start_cond/stop_cond.

        * pt.c: (instantiate_class_template): Add a wrapper to push/pop new
	TV_TEMPLATE_INST.
	(instantiate_template): Add a wrapper to push/pop new TV_TEMPLATE_INST.
	(lookup_template_class): Refactor timevar calls out to a wrapper
	function.  Change use of TV_NAME_LOOKUP to TV_TEMPLATE_INST.
	(instantiate_decl): Change TV_PARSE to TV_TEMPLATE_INST.

	* name-lookup.c: (store_bindings): Change TV_NAME_LOOKUP to start/stop.
	(poplevel_class): Change TV_NAME_LOOKUP to start_cond/stop_cond.
	(push_namespace): Likewise.
	(pop_nested_namespace): Likewise.
	(pushdecl_namespace_level): Likewise.
	(store_class_bindings): Likewise.
	(push_to_top_level): Likewise.
	(identifier_type_value): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start/stop.
	(find_binding): Likewise.
	(push_using_decl): Likewise.
	(lookup_arg_dependent): Likewise.
	(push_using_directive): Likewise.
	(qualified_lookup_using_namespace): Refactor POP_TIMEVAR_AND_RETURN
	to plain code.  Change TV_NAME_LOOKUP to start/stop.
	(lookup_type_current_level): Likewise.  Refactor inner return to
	break.
	(pushdecl_class_level): Refactor POP_TIMEVAR_AND_RETURN to plain
	code.  Change TV_NAME_LOOKUP to start_cond/stop_cond.
	(pushdecl_top_level_1): Likewise.
	(lookup_using_namespace): Likewise.
	(pushdecl_with_scope): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start_cond/stop_cond.
	(push_overloaded_decl): Likewise.
	(push_class_level_binding): Likewise.
	(namespace_binding): Likewise.
	(set_namespace_binding): Likewise.
	(supplement_binding): Likewise.
	(unqualified_namespace_lookup): Likewise.
	(lookup_name_real): Likewise.
	(lookup_type_scope): Likewise.
	(namespace_ancestor): Likewise.
	(lookup_name_innermost_nonclass_level): Likewise.
	(pushtag): Likewise.
	(pop_from_top_level): Likewise.
	(pushdecl_maybe_friend): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start_cond/stop_cond.  Wrap long
	lines.
	(add_using_namespace): Refactor timevar calls out to a wrapper
	function.  Change TV_NAME_LOOKUP to start_cond/stop_cond.  Bypass
	wrapper on call to self.

	* decl2.c: (cp_write_global_declarations):  Add start/stop of
	new TV_PHASE_DEFERRED, TV_PHASE_CGRAPH, TV_PHASE_CHECK_DBGINFO.
	Remove push/pop calls to TV_VARCONST.

	* parser.c: Add include of "timevar.h".
	(cp_parser_explicit_instantiation): Add push/pop calls to
	TV_TEMPLATE_INST.
	(cp_parser_enum_specifier): Add push/pop calls to new TV_PARSE_ENUM.
	(cp_parser_class_specifier): Add wrapper to add push/pop calls to
	TV_PARSE_STRUCT.
	(cp_parser_function_definition_from_specifiers_and_declarator): Add
	push/pop calls to new TV_PARSE_FUNC or TV_PARSE_INLINE.
	(cp_parser_late_parsing_for_member):  Add push/pop calls to
	new TV_PARSE_INMETH.

	* call.c: Add include of "timevar.h".
        (convert_class_to_reference): Wrap and add push/pop calls to 
	TV_OVERLOAD.
	(build_op_call): Likewise.
	(build_conditional_expr): Likewise.
	(build_new_op): Likewise.
	(build_new_method_call): Likewise.
        (build_user_type_conversion): Reorganize to single return and add
	push/pop calls to TV_OVERLOAD.
        (perform_overload_resolution): Likewise.

	* Make-lang.in: Add dependence of call.o and parser.o on $(TIMEVAR_H).

2011-05-02  Jason Merrill  <jason@redhat.com>

	* tree.c (build_vec_init_expr): Take complain parm.
	(build_vec_init_elt): Likewise.  Free arg vector.
	(diagnose_non_constexpr_vec_init, build_array_copy): Adjust.
	* cp-tree.h (VEC_INIT_EXPR_SLOT): Use VEC_INIT_EXPR_CHECK.
	(VEC_INIT_EXPR_INIT): Likewise.
	Adjust build_vec_init_expr declaration.
	* init.c (perform_member_init): Adjust.

	Revert:
	PR c++/40975
	* cp-tree.def (VEC_INIT_EXPR): Add third operand.
	* cp-tree.h (VEC_INIT_EXPR_NELTS): New.
	* cp-gimplify.c (cp_gimplify_expr) [VEC_INIT_EXPR]: Handle it.
	* tree.c (build_vec_init_expr): Handle getting pointer/nelts.
	(build_vec_init_elt): Don't expect an array type.
	(build_array_copy): Adjust.
	* init.c (perform_member_init): Adjust.
	(build_new_1): Use build_vec_init_expr.

	PR c++/48834
	* tree.c (build_vec_init_expr): Set TREE_SIDE_EFFECTS.
	Protect an explicit target.

	PR c++/48446
	* decl.c (stabilize_save_expr_r, stabilize_vla_size): New.
	(compute_array_index_type): Revert earlier 48446 changes.
	(grokdeclarator): Use stabilize_vla_size.

2011-05-02  Dmitry Gorbachev  <d.g.gorbachev@gmail.com>
	    Eric Botcazou <ebotcazou@adacore.com>

	* parser.c (cp_parser_init_declarator): Set pushed_scope to NULL_TREE
	instead of inappropriate zero values.

2011-05-02  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/47969
	* decl.c (compute_array_index_type): Check build_expr_type_conversion
	return value for NULL_TREE.

2011-04-29  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/48606
	* init.c (perform_member_init): Check build_value_init return
	value for error_mark_node.

2011-04-29  Diego Novillo  <dnovillo@google.com>
	    Le-Chun Wu  <lcwu@google.com>

	* call.c (conversion_null_warnings): Also handle assignments
	when warning about NULL conversions.

2011-04-29  Le-Chun Wu  <lcwu@google.com>

	* cp-tree.h (LOOKUP_EXPLICIT_TMPL_ARGS): Define.
	* call.c (build_new_function_call): Set it for TEMPLATE_ID_EXPRs.
	(build_over_call): Use it to determine whether to emit a NULL
	warning for template function instantiations.
	(build_new_method_call): Set LOOKUP_EXPLICIT_TMPL_ARGS if
	EXPLICIT_TARGS is set.

2011-04-29  Nicola Pero  <nicola.pero@meta-innovation.com>,
	    Mike Stump <mikestump@comcast.net>

	* Make-lang.in ($(srcdir)/cp/cfns.h): Enable the dependency only
	in maintainer mode.  Use the --output-file option of gperf instead
	of > to prevent creating an empty cp/cfns.h when gperf is not
	available.

2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/48798
	* semantics.c (finish_base_specifier): cv-qualified base class
	is fine, per DR 484.

2011-04-28  Dodji Seketeli  <dodji@redhat.com>

	PR c++/48656
	* semantics.c (finish_call_expr): Don't forget BASELINK nodes when
	considering call expressions involving a member function.

2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/48530
	* tree.c (build_cplus_new): Check build_target_expr return
	value for error_mark_node.

2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/48771
	* semantics.c (literal_type_p): Reference types are literal types,
	per the FDIS.
	(valid_type_in_constexpr_fundecl_p): Remove.
	(is_valid_constexpr_fn): Adjust.

2011-04-27  Jason Merrill  <jason@redhat.com>

	PR libstdc++/48760
	Implement list-initialization of _Complex.
	* decl.c (reshape_init_r): Allow {real,imag} for _Complex.
	(check_initializer): Likewise.
	* call.c (build_complex_conv): New.
	(implicit_conversion): Call it.
	(convert_like_real): Handle it.
	* typeck2.c (check_narrowing): Handle it.

	* init.c (build_vec_delete_1): Look for sfk_deleting_destructor to
	decide whether to delete.
	(build_vec_init): Pass sfk_complete_destructor.

	PR c++/40975
	* cp-tree.def (VEC_INIT_EXPR): Add third operand.
	* cp-tree.h (VEC_INIT_EXPR_NELTS): New.
	* cp-gimplify.c (cp_gimplify_expr) [VEC_INIT_EXPR]: Handle it.
	* tree.c (build_vec_init_expr): Handle getting pointer/nelts.
	(build_vec_init_elt): Don't expect an array type.
	(build_array_copy): Adjust.
	* init.c (perform_member_init): Adjust.
	(build_new_1): Use build_vec_init_expr.

	* class.c (resolve_address_of_overloaded_function): Don't
	change OVERLOAD to TREE_LIST.
	* pt.c (print_candidates_1): Remove nonsensical assert.

	PR c++/48046
	* parser.c (cp_parser_diagnose_invalid_type_name): Commit
	to tentative parse sooner.

2011-04-26  Jason Merrill  <jason@redhat.com>

	PR c++/42687
	* parser.c (cp_parser_primary_expression): Set *idk to
	CP_ID_KIND_NONE for a parenthesized identifier.

	* ptree.c (cxx_print_type) [TYPENAME_TYPE]: Dump fullname.
	(cxx_print_identifier): Correct indentation.

	PR c++/48530
	* decl.c (cxx_maybe_build_cleanup): Add complain parm.
	* tree.c (force_target_expr): Add complain parm.
	(build_target_expr_with_type): Likewise.
	(get_target_expr_sfinae): Split out.
	(build_vec_init_expr, bot_manip): Adjust.
	* init.c (build_vec_delete, build_vec_delete_1): Add complain parm.
	(build_delete, build_dtor_call): Likewise.
	(perform_direct_initialization_if_possible): Adjust.
	(build_vec_init): Handle error return.
	* cvt.c (force_rvalue): Add complain parm.
	Call build_special_member_call directly.
	* decl2.c (delete_sanity): Add complain parm.
	(build_cleanup): Adjust.
	* pt.c (tsubst_copy_and_build, tsubst_expr): Adjust.
	* semantics.c (finish_stmt_expr_expr): Adjust.
	(finish_compound_literal): Adjust.
	* parser.c (cp_parser_delete_expression): Adjust.
	* typeck2.c (build_functional_cast): Adjust.
	* cp-tree.h: Adjust.

2011-04-26  Martin Jambor  <mjambor@suse.cz>

	* class.c (cp_fold_obj_type_ref): Remove.
	* cp-tree.h (cp_fold_obj_type_ref): Remove declaration.

2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>

	* cp-tree.def: Add a new UNDERLYING_TYPE tree code.
	* cp-tree.h (enum cp_trait_kind): Add CPTK_UNDERLYING_TYPE, tidy.
	(UNDERLYING_TYPE_TYPE): Add.
	* cp-objcp-common.c (cp_common_init_ts): Mark UNDERLYING_TYPE
	as TS_COMMON.
	* parser.c (cp_lexer_next_token_is_decl_specifier_keyword,
	cp_parser_simple_type_specifier): Handle UNDERLYING_TYPE.
	(cp_parser_trait_expr): Deal with RID_UNDERLYING_TYPE; tidy.
	* semantics.c (finish_underlying_type): New.
	* typeck.c (structural_comptypes): Handle UNDERLYING_TYPE.
	* error.c (dump_type, dump_type_prefix, dump_type_suffix): Likewise.
	* cxx-pretty-print.c (p_cxx_type_id): Likewise.
	* tree.c (cp_walk_subtrees): Likewise.
	* pt.c (for_each_template_parm_r, tsubst, unify,
	dependent_type_p_r): Likewise.
	* mangle.c (write_type): Sorry for __underlying_type.

2011-04-25  Jason Merrill  <jason@redhat.com>

	PR c++/48707
	* decl.c (type_dependent_init_p): New.
	(cp_finish_decl): Check it.
	* pt.c (any_type_dependent_elements_p): New.
	* cp-tree.h: Declare it.

2011-04-20  Jason Merrill  <jason@redhat.com>

	* semantics.c (finish_compound_literal): Don't put an array
	with a dtor in a static variable.

	* call.c (build_over_call): Handle trivial dtor.

	* search.c (lookup_fnfields_slot): Call complete_type.

	PR c++/48594
	* decl2.c (build_offset_ref_call_from_tree): Move
	non-dependency of object outside condition.

	PR c++/48657
	* decl.c (cp_finish_decl): Simplify template handling.

2011-04-20  Jim Meyering  <meyering@redhat.com>

	* tree.c (cxx_printable_name_internal): Remove useless if-before-free.

2011-04-19  Jason Merrill  <jason@redhat.com>

	PR c++/46304
	* typeck.c (cp_build_binary_op): Fold COMPLEX_EXPR.

	PR c++/45267
	* decl.c (duplicate_decls): Keep always_inline attribute
	in sync with DECL_DISREGARD_INLINE_LIMITS.

2011-04-18  Jason Merrill  <jason@redhat.com>

	PR c++/48569
	* typeck2.c (build_functional_cast): Handle VOID_TYPE.

	PR c++/48537
	* init.c (build_value_init): Handle UNION_TYPE the same.

2011-04-18  Jakub Jelinek  <jakub@redhat.com>

	PR c++/48632
	* parser.c (cp_parser_omp_for_loop): Don't use cp_parser_omp_for_incr
	for type dependent pointers.

2011-04-18  Jim Meyering  <meyering@redhat.com>

	* pt.c (type_unification_real): Fix typo in comment: s/in in/in/.

2011-04-17  Jan Hubicka  <jh@suse.cz>

	* semantics.c (finish_goto_stmt): Do set UNINLINABLE flag on computed
	gotos.

2011-04-17  Jason Merrill  <jason@redhat.com>

	PR c++/48531
	* typeck2.c (build_functional_cast): Disallow array type.

	* tree.c (get_target_expr): Handle VEC_INIT_EXPR.

2011-04-17  Jan Hubicka  <jh@suse.cz>

	* class.c (cp_fold_obj_type_ref): Drop vtable_method.

2011-04-15  Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>

	Implement N3271
	* parser.c (cp_convert_range_for): Split into
	cp_parser_perform_range_for_lookup.
	(cp_parser_perform_range_for_lookup): New.
	(cp_parser_range_for_member_function): New.
	(cp_parser_for_init_statement): Correct error message.
	* semantics.c (finish_call_expr): Accept COMPONENT_REF.

2011-04-14  Nicola Pero  <nicola.pero@meta-innovation.com>

	* parser.c (cp_parser_objc_protocol_declaration): Updated for
	change from objc_declare_protocols() to objc_declare_protocol().

2011-04-14  Nathan Froyd  <froydnj@codesourcery.com>

	PR objc++/48479
	* typeck.c (cxx_mark_addressable) [CONST_DECL]: Mark addressable
	and return immediately.

2011-04-14  Nathan Froyd  <froydnj@codesourcery.com>

	* cp-tree.def (SWITCH_STMT): Add an extra operand.
	* cp-objcp-common.c (cp_common_init_ts): Mark it as TS_TYPED.
	* cp-tree.h (SWITCH_STMT_SCOPE): Define.
	* semantics.c (begin_switch__stmt): Pass scope to build_stmt.
	(finish_switch_stmt): Use SWITCH_STMT_SCOPE instead of TREE_CHAIN.

2011-04-14  Nathan Froyd  <froydnj@codesourcery.com>

	* cp-tree.def (IF_STMT): Add an extra operand.
	* cp-objcp-common.c (cp_common_init_ts): Mark it as TS_TYPED.
	* cp-tree.h (IF_SCOPE): Define.
	* semantics.c (begin_if_stmt): Pass scope to build_stmt.
	(finish_if_stmt): Use IF_SCOPE instead of TREE_CHAIN.

2011-04-14  Nathan Froyd  <froydnj@codesourcery.com>

	* cp-tree.def (FOR_STMT, RANGE_FOR_STMT): Add an extra operand.
	* cp-objcp-common.c (cp_common_init_ts): Mark them as TS_TYPED.
	* cp-tree.h (FOR_SCOPE, RANGE_FOR_SCOPE): Define.
	* semantics.c (begin_for_stmt): Pass an extra arg to build_stmt.
	Use FOR_SCOPE instead of TREE_CHAIN.
	(begin_range_for_stmt): Likewise, with RANGE_FOR_SCOPE.
	(finish_for_stmt): Likewise.

2011-04-14  Jason Merrill  <jason@redhat.com>

	* parser.c (cp_parser_postfix_expression): Fix flags passed to
	build_new_method_call.
	* semantics.c (finish_call_expr): Likewise.

	PR c++/48531
	* init.c (build_value_init_noctor): Check complain consistently.

	PR c++/48557
	* typeck.c (cp_build_binary_op): Don't decay void operands.

	PR c++/48446
	* decl.c (compute_array_index_type): Use get_temp_regvar instead
	of variable_size.
	* init.c (get_temp_regvar): No longer static.
	* cp-tree.h: Declare it.

2011-04-14  Nicola Pero  <nicola.pero@meta-innovation.com>

	* parser.c (cp_parser_objc_class_declaration): Updated for change
	in objc_declare_class().

2011-04-14  Nathan Froyd  <froydnj@codesourcery.com>

	* decl.c (poplevel): Use block_chainon.

2011-04-13  Jason Merrill  <jason@redhat.com>

	PR c++/48594
	* decl2.c (build_offset_ref_call_from_tree): Fix calling a functor
	or pointer to (non-member) function.

2011-04-13  Jakub Jelinek  <jakub@redhat.com>

	PR c++/48570
	* semantics.c (cxx_eval_array_reference): Handle reading from
	wchar_t, char16_t and char32_t STRING_CST.

2011-04-13  Dodji Seketeli  <dodji@redhat.com>

	PR c++/48574
	* class.c (fixed_type_or_null): We cannot determine the dynamic
    	type of a reference variable if its initializer is dependent.

2011-04-13  Jason Merrill  <jason@redhat.com>

	PR c++/48581
	* pt.c (tsubst_copy_and_build) [CALL_EXPR]: Don't complain about
	unqualified lookup failing if we're still in a template.

2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>

	* cp-lang.c (cp_init_ts): Call cp_common_init_ts.  Move
	tree_contains_struct initialization to...
	* cp-objcp-common.c (cp_common_init_ts): ...here.  Use MARK_*
	macros.
	* cp-objcp-common.h (cp_common_init_ts): Declare.
	* cp-tree.h (union lang_tree_node): Check for TS_COMMON before
	calling TREE_CHAIN.

2011-04-12  Nicola Pero  <nicola.pero@meta-innovation.com>

	* parser.c (cp_parser_objc_message_expression): Updated call
	to objc_build_message_expr.

2011-04-12  Martin Jambor  <mjambor@suse.cz>

	* class.c (cp_fold_obj_type_ref): Call cgraph_get_node instead of
	cgraph_get_create_node.
	* decl2.c (cp_write_global_declarations): Call cgraph_get_node
	instead of cgraph_get_create_node.
	* method.c (make_alias_for_thunk): Call cgraph_get_node
	instead of cgraph_get_create_node, assert it returns non-NULL.
	(use_thunk): Likewise.
	* optimize.c (maybe_clone_body): Call cgraph_same_body_alias only
	when flag_syntax_only is not set.  Call cgraph_get_node instead of
	cgraph_get_create_node.
	(maybe_clone_body): Call cgraph_get_node instead of
	cgraph_get_create_node.

2011-04-12  Martin Jambor  <mjambor@suse.cz>

	* class.c (cp_fold_obj_type_ref): Call cgraph_get_create_node
	instead of cgraph_node.
	* decl2.c (cxx_callgraph_analyze_expr): Likewise.
	(cp_write_global_declarations): Likewise.
	* optimize.c (maybe_clone_body): Likewise.
	* semantics.c (maybe_add_lambda_conv_op): Likewise.
	* mangle.c (mangle_decl): Likewise.
	* method.c (make_alias_for_thunk): Likewise.
	(use_thunk): Likewise.

2011-04-11  Jason Merrill  <jason@redhat.com>

	PR c++/48535
	* decl.c (cp_complete_array_type_or_error): New.
	* semantics.c (finish_compound_literal): Use it.
	* cp-tree.h: Declare it.

	PR c++/48535
	* semantics.c (finish_compound_literal): Handle references.

	PR c++/48535
	* semantics.c (finish_compound_literal): Take complain parm.
	(build_lambda_object): Adjust.
	* cp-tree.h: Adjust.
	* call.c (convert_like_real): Adjust.
	* decl.c (check_initializer): Adjust.
	* parser.c (cp_parser_postfix_expression): Adjust.
	(cp_parser_functional_cast): Adjust.
	* pt.c (tsubst_copy_and_build): Adjust.
	* typeck2.c (process_init_constructor_record): Adjust.

	PR c++/48534
	* cvt.c (ocp_convert): Use build_nop to convert to underlying type
	of scoped enum.

	PR c++/48523
	* tree.c (maybe_dummy_object): Use build_x_indirect_ref rather
	than cp_build_indirect_ref.

	PR c++/48457, Core 1238
	* call.c (reference_binding): Allow rvalue reference to bind to
	function lvalue.
	* tree.c (lvalue_kind): Functions are always lvalues.

2011-04-07  Jason Merrill  <jason@redhat.com>

	PR c++/48500
	* semantics.c (potential_constant_expression_1) [CALL_EXPR]: Check
	arguments even if we don't know the function.

	PR c++/48481
	* tree.c (build_overload): Allow an unwrapped FUNCTION_DECL
	at the end of the chain.
	* pt.c (dependent_template_p): Use OVL_CURRENT/NEXT.
	(iterative_hash_template_arg): Likewise.

	PR c++/48481
	* cp-tree.h (OVL_ARG_DEPENDENT): New.
	* name-lookup.c (add_function): Set it.
	* semantics.c (finish_call_expr): Free OVERLOADs if it's set.

	PR c++/48481
	* call.c (build_user_type_conversion_1): Use lookup_fnfields_slot.
	Release unused vector.

	PR c++/48451
	* pt.c (fn_type_unification): Don't clear incomplete pack flag.
	(type_unification_real): Clear it here instead.

	PR c++/48468
	* except.c (build_noexcept_spec): Propagate error_mark_node.
	(finish_noexcept_expr): Likewise.

	PR c++/48452
	* typeck.c (build_x_compound_expr_from_list): Return error_mark_node
	in SFINAE context.

	PR c++/48450
	* call.c (resolve_args): Take complain.
	(build_new_function_call, build_operator_new_call): Pass it.
	(build_op_call, build_new_op, build_new_method_call): Pass it.

	PR c++/48450
	* typeck.c (check_for_casting_away_constness): Take complain.
	(build_static_cast_1, build_reinterpret_cast_1): Pass it.
	(build_const_cast_1): Pass it.  Take full complain parm.
	(build_const_cast, cp_build_c_cast): Adjust.

	* tree.c (build_aggr_init_expr): Always return error_mark_node
	on abstract violation.

	PR c++/48450
	* tree.c (build_cplus_new, build_aggr_init_expr): Take complain.
	(bot_manip): Adjust.
	* cp-tree.h: Adjust.
	* call.c (convert_like_real, build_cxx_call): Adjust.
	(perform_direct_initialization_if_possible): Adjust.
	* cvt.c (ocp_convert): Adjust.
	* init.c (build_value_init): Adjust.
	* semantics.c (maybe_add_lambda_conv_op): Adjust.
	* typeck.c (unary_complex_lvalue, cp_build_modify_expr): Adjust.
	* typeck2.c (build_functional_cast): Adjust.

	* init.c (build_value_init_noctor): Handle REFERENCE_TYPE at top
	level.
	(perform_member_init): Not here.
	* typeck2.c (build_functional_cast): Limit REFERENCE_TYPE special
	case to templates.
	(abstract_virtuals_error_sfinae): Remove RESULT_DECL special case.

	PR c++/48449
	* typeck2.c (build_functional_cast): Check complain consistently.
	Use build_value_init and abstract_virtuals_error_sfinae.
	(abstract_virtuals_error_sfinae): Split out.
	* cp-tree.h: Declare it.
	* init.c (build_new_1): Use it.
	(build_value_init_noctor): Handle FUNCTION_TYPE.

	* semantics.c (finish_decltype_type): Simplify handling of unknown
	type.

	* semantics.c (finish_decltype_type): Add complain parm.
	* cp-tree.h: Adjust.
	* parser.c (cp_parser_decltype): Adjust.
	* pt.c (tsubst): Adjust.

	PR c++/48450
	* cvt.c (ocp_convert): Handle converting scoped enum to bool.

2011-03-31  Jason Merrill  <jason@redhat.com>

	PR c++/48277
	* semantics.c (finish_call_expr): Remove assert.

	PR c++/48280
	* method.c (defaultable_fn_check): Templates are not defaultable.

	* parser.c (cp_parser_init_declarator): Avoid redundant
	cp_finish_decl for member declarations.

2011-03-30  Jason Merrill  <jason@redhat.com>

	PR c++/48212
	* semantics.c (non_const_var_error): Just return if DECL_INITIAL
	is error_mark_node.

2011-03-30  Jason Merrill  <jason@redhat.com>

	PR c++/48369
	* semantics.c (potential_constant_expression_1): Handle
	UNORDERED_EXPR and ORDERED_EXPR.

	PR c++/48281
	* semantics.c (finish_compound_literal): Do put static/constant
	arrays in static variables.

	* call.c (convert_like_real) [ck_list]: Build up the
	initializer_list object directly.
	* decl.c (build_init_list_var_init): Adjust.

	* call.c (convert_like_real): Correct TREE_CONSTANT on CONSTRUCTOR.
	* decl.c (reshape_init_array_1): Likewise.

2011-03-29  Jason Merrill  <jason@redhat.com>

	PR c++/48265
	* pt.c (value_dependent_expression_p) [VAR_DECL]: Make sure
	the variable is constant before looking at its initializer.

	PR c++/48319
	* pt.c (value_dependent_expression_p): Handle TEMPLATE_ID_EXPR.

	PR c++/48089
	* semantics.c (potential_constant_expression_1): Change error about
	use of *this in constructor into sorry.

	PR c++/48296
	* decl.c (cp_finish_decl): Defer validation of constexpr member
	functions.
	* class.c (finalize_literal_type_property): Validate them here.
	* semantics.c (is_valid_constexpr_fn): Don't check completeness.

	* semantics.c (is_valid_constexpr_fn): Specify input location.

2011-03-28  Jason Merrill  <jason@redhat.com>

	PR c++/48313
	* pt.c (maybe_adjust_types_for_deduction): Handle T&& deduction
	from overloaded function.

	Core 1232
	* call.c (build_array_conv): New.
	(implicit_conversion): Use it.

	* call.c (reference_binding): Allow direct binding to an array
	rvalue.

	Core 898
	* parser.c (cp_parser_compound_statement): Add function_body parm.
	Complain about non-body compound-stmt in constexpr fn.
	(cp_parser_primary_expression, cp_parser_statement): Adjust.
	(cp_parser_implicitly_scoped_statement): Adjust.
	(cp_parser_function_body, cp_parser_try_block): Adjust.
	(cp_parser_handler, cp_parser_objc_synchronized_statement): Adjust.
	(cp_parser_objc_try_catch_finally_statement): Adjust.

	Core 898
	* semantics.c (constexpr_fn_retval): New.  Allow using-declaration
	and using-definition.
	(register_constexpr_fundef): Call it.

	* except.c (build_noexcept_spec): Call cxx_constant_value after
	converting to bool.

2011-03-25  Kai Tietz  <ktietz@redhat.com>

	* lex.c (interface_strcmp): Handle dos-paths.
	(handle_pragma_implementation): Use filename_cmp instead of
	strcmp.
	(in_main_input_context): Likewise.

2011-03-25  Jason Merrill  <jason@redhat.com>

	Core 1135
	* method.c (defaulted_late_check): Check for exception spec mismatch.
	(defaultable_fn_check): Allow exception spec and virtual.
	* class.c (check_for_override): A virtual dtor is non-trivial.

	PR c++/48289
	* pt.c (build_non_dependent_expr): Keep dereferences outside the
	NON_DEPENDENT_EXPR.

2011-03-25  Kai Tietz  <ktietz@redhat.com>

	* decl.c (decls_match): Replace target hook
	call of comp_type_attributes by version in tree.c file.
	* search.c (check_final_overrider): Likewise.
	* typeck.c (structural_comptypes): Likewise.

2011-03-21  Kai Tietz  <ktietz@redhat.com>

	PR target/12171
	* cxx-pretty-print.c (pp_cxx_ptr_operator):
	Display allowed attributes for function pointer types.
	* error.c (dump_type_prefix): Likewise.

	* tree.c (cxx_attribute_table): Adjust table.

2011-03-18  Jason Merrill  <jason@redhat.com>

	PR c++/48162
	* semantics.c (finish_call_expr): Allow TARGET_EXPR for now.

	PR c++/48118
	* call.c (build_over_call): Don't skip ck_rvalue.

2011-03-17  Jason Merrill  <jason@redhat.com>

	PR c++/47504
	* semantics.c (cxx_eval_constant_expression) [NOP_EXPR]: Don't let
	the conversion set TREE_OVERFLOW.

	Core 1212
	* semantics.c (finish_decltype_type): Return T&& for xvalue.
	* typeck.c (unlowered_expr_type): Preserve cv-quals.

	PR c++/48166
	* decl.c (revert_static_member_fn): Strip function-cv-quals.

2011-03-16  Jason Merrill  <jason@redhat.com>

	PR c++/48089
	* semantics.c (potential_constant_expression_1): Don't allow *this
	in a constructor.
	(register_constexpr_fundef): Use potential_rvalue_constant_expression.

	PR c++/47301
	* decl.c (compute_array_index_type): Don't bother trying to deal
	with literal classes in ABI v1.

	PR c++/46336
	* decl.c (duplicate_decls): Return NULL_TREE for clashing
	C functions.

	PR c++/47570
	* semantics.c (cxx_eval_constant_expression) [COMPOUND_EXPR]: Don't
	use the generic binary expression handling.

2011-03-16  Diego Novillo  <dnovillo@google.com>

	* Make-lang.in (CXX_PARSER_H): New.
	(cp/parser.o): Add dependency on CXX_PARSER_H.
	Add dependency on tree-pretty-print.h
	(cp/cp-lang.o): Add dependency on CXX_PARSER_H.
	* cp-lang.c: Include parser.h.
	* parser.c: Include parser.h.
	(struct cp_token): Add bitfield purged_p.
	Update all users.
	Move to parser.h.
	(CPP_PURGED): Remove.  Update all users.
	(struct cp_lexer): Change field buffer to be a VEC of cp_token.
	Remove field buffer_length.
	Update all users.
	Move to parser.h.
	(struct tree_check): Move to parser.h.
	(cp_token_position): Likewise.
	(struct cp_token_cache): Likewise.
	(CPP_KEYWORD): Likewise.
	(CPP_TEMPLATE_ID): Likewise.
	(CPP_NESTED_NAME_SPECIFIER): Likewise.
	(N_CP_TTYPES): Likewise.
	(enum cp_parser_status_kind): Likewise.
	(struct cp_parser_context): Likewise.
	(struct cp_default_arg_entry_d): Likewise.
	(struct cp_unparsed_functions_entry_d): Likewise.
	(struct cp_parser): Likewise.
	(cp_lexer_dump_tokens): New.
	(cp_lexer_debug_tokens): New.
	(cp_lexer_finished_p): New.
	(cp_lexer_alloc): Factor out of cp_lexer_new_main.
	(cp_lexer_new_main): Re-write main lexing loop to push
	tokens into the new VEC buffer.
	(cp_lexer_print_token): Improve printing of CPP_NUMBER tokens.
	Do not abort if the token type is not recognized, just print
	its code.
	* parser.h: New file.
	* config-lang.in (gtfiles): Add cp/parser.h.

2011-03-16  Jason Merrill  <jason@redhat.com>

	Core 1148
	* typeck.c (check_return_expr): Fix conditions for setting
	LOOKUP_PREFER_RVALUE.

	* call.c (build_over_call): Remove require_complete_type_sfinae call.

	PR c++/48132
	* decl.c (check_array_designated_initializer): Allow integer index.
	(reshape_init_array_1): Set index on the elements.

2011-03-16  Jason Merrill  <jason@redhat.com>

	PR c++/48113
	* typeck.c (convert_for_initialization): Use
	perform_implicit_conversion_flags.
	* call.c (standard_conversion): If LOOKUP_PREFER_RVALUE, set
	rvaluedness_matches_p on ck_rvalue.
	(convert_like_real) [ck_rvalue]: And restore it here.

	PR c++/48115
	* call.c (convert_arg_to_ellipsis): Handle incomplete type.

2011-03-16  Jason Merrill  <jason@redhat.com>

	* parser.c (cp_parser_abort_tentative_parse): Make sure we haven't
	committed to this tentative parse.

	PR c++/47999
	* semantics.c (finish_call_expr): Preserve reference semantics
	in templates.

	* call.c (convert_default_arg): Use LOOKUP_IMPLICIT.

2011-03-16  Jakub Jelinek  <jakub@redhat.com>

	* cp-objcp-common.c (cp_function_decl_explicit_p): Don't crash if
	DECL_LANG_SPECIFIC is NULL.

2011-03-15  Jason Merrill  <jason@redhat.com>

	Core 1074
	* pt.c (value_dependent_expression_p) [NOEXCEPT_EXPR]: Don't
	check value_dependent_expression_p on the operand.

	* semantics.c (push_cx_call_context): Return bool.
	(cxx_eval_call_expression): Handle excess depth.

	Core 1191
	* method.c (synthesized_method_walk): Cleanups don't affect the
	triviality of a constructor, but do affect deletion and exception
	specification.

2011-03-15  Rodrigo Rivas Costa  <rodrigorivascosta@gmail.com>

	* decl2.c (cp_check_const_attributes): New.
	(cplus_decl_attributes): Call cp_check_const_attributes.

2011-03-15  Jason Merrill  <jason@redhat.com>

	PR c++/34758
	* call.c (convert_default_arg): Use DECL_ORIGIN of fn.  Check for
	recursion first.
	(push_defarg_context, pop_defarg_context): New.
	* parser.c (cp_parser_late_parsing_default_args): Use them.
	* cp-tree.h: Declare them.

2011-03-11  Dodji Seketeli  <dodji@redhat.com>

	* call.c (add_builtin_candidate)<case INDIRECT_REF>: The type of
	the argument of the indirection operator should not be dependent.
	Fix the comment.

2011-03-11  Jason Merrill  <jason@redhat.com>

	PR c++/47125
	* pt.c (tsubst) [TYPENAME_TYPE]: Only give errors if tf_error.

	PR c++/47144
	* parser.c (cp_parser_template_type_arg): Set
	type_definition_forbidden_message.

	PR c++/47808
	* decl.c (compute_array_index_type): Discard folding
	if it didn't produce a constant.

2011-03-11  Jakub Jelinek  <jakub@redhat.com>

	PR c++/48035
	* init.c (build_zero_init_1): Extracted from build_zero_init.
	Add FIELD_SIZE argument, if non-NULL and field bit_position
	as not smaller than that, don't add that field's initializer.
	Pass DECL_SIZE as last argument to build_zero_init_1
	for DECL_FIELD_IS_BASE fields.
	(build_zero_init): Use build_zero_init_1.

2011-03-10  Jason Merrill  <jason@redhat.com>

	PR c++/48029
	* pt.c (iterative_hash_template_arg): Remove special case for
	ARRAY_TYPE.

	PR c++/47198
	* parser.c (cp_parser_single_declaration): Just return if
	cp_parser_parse_and_diagnose_invalid_type_name complained.

2011-03-09  Jason Merrill  <jason@redhat.com>

	PR c++/44629
	* pt.c (unify): An unresolved overload is a nondeduced context.

2011-03-09  Martin Jambor  <mjambor@suse.cz>

	PR tree-optimization/47714
	* method.c (use_thunk): Clear addressable flag of thunk arguments.

2011-03-08  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47705
	* pt.c (convert_nontype_argument): Only call decay_conversion on
	arrays.

2011-03-08  Jason Merrill  <jason@redhat.com>

	PR c++/47488
	* mangle.c (write_template_arg_literal) [STRING_CST]: Sorry.

	PR c++/47705
	* pt.c (convert_nontype_argument): Don't crash on non-pointer
	argument to pointer parameter.

	PR c++/45651
	* pt.c (instantiate_decl): Don't clear DECL_INTERFACE_KNOWN on
	!TREE_PUBLIC decls.

2011-03-08  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47957
	* name-lookup.c (binding_to_template_parms_of_scope_p): Only
	consider scopes of primary template definitions.  Adjust comments.

2011-03-07  Jason Merrill  <jason@redhat.com>

	PR c++/48003
	* pt.c (convert_nontype_argument): Fix -fpermissive allowing
	integer overflow.
	* semantics.c (potential_constant_expression_1): Check TREE_OVERFLOW.

	PR c++/48015
	* init.c (constant_value_1): Always require init to be TREE_CONSTANT.

	PR c++/48008
	* mangle.c (write_type): Strip cv-quals from FUNCTION_TYPE here.
	(write_CV_qualifiers_for_type): Not here.

2011-03-06  Joseph Myers  <joseph@codesourcery.com>

	* lang-specs.h: Match -save-temps* instead of -save-temps.

2011-03-05  Jason Merrill  <jason@redhat.com>

	* mangle.c (write_expression): Change ABI v6 to v5.
	(write_type): Likewise.

2011-03-04  Jan Hubicka  <jh@suse.cz>

	PR lto/47497
	* optimize.c (maybe_clone_body): Update call of cgraph_same_body_alias
	and cgraph_add_thunk.
	* method.c (make_alias_for_thunk, use_thunk): Likewise.
	* mangle.c (mangle_decl): Likewise.

2011-03-04  Jason Merrill  <jason@redhat.com>

	PR c++/47971
	* pt.c (tsubst_copy_and_build) [PSEUDO_DTOR_EXPR]: Use tsubst for type.
	(tsubst_copy) [default]: Just return t if !ENABLE_CHECKING.

	PR c++/46220
	* search.c (check_final_overrider): Allow pointer to same incomplete
	class type with different cv-quals.

2011-03-03  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/47974
	* pt.c (tsubst_template_args): Check argument t for error_mark_node.

2011-03-03  Jason Merrill  <jason@redhat.com>

	PR c++/47950
	* pt.c (tsubst_copy_and_build) [TARGET_EXPR]: Retain TREE_CONSTANT.

2011-03-02  Jason Merrill  <jason@redhat.com>

	PR c++/47950
	* parser.c (cp_parser_condition): Don't fold_non_dependent_expr here.

	PR c++/47774
	* tree.c (build_vec_init_elt): Split out from...
	(build_vec_init_expr): ...here.
	(diagnose_non_constexpr_vec_init): New fn.
	* semantics.c (potential_constant_expression_1): Use it.
	* cp-tree.h: Declare it.

2011-03-01  Jason Merrill  <jason@redhat.com>

	PR c++/46159
	* parser.c (cp_parser_primary_expression): Don't warn about a
	failed tentative parse.

	PR c++/47200
	* semantics.c (cxx_bind_parameters_in_call): Don't call
	adjust_temp_type on non-constant args.

	PR c++/47851
	* call.c (standard_conversion): Provide requested cv-quals on
	class rvalue conversion.

	PR c++/46282
	* decl2.c (grokbitfield): Handle type-dependent width.

2011-02-28  Jason Merrill  <jason@redhat.com>

	PR c++/47873
	* class.c (update_vtable_entry_for_fn): Check BINFO_LOST_PRIMARY_P
	after checking for a non-thunk.

2011-02-26  Jason Merrill  <jason@redhat.com>

	PR c++/47904
	* tree.c (cp_tree_equal): Compare DECL_PARM_LEVEL.
	* pt.c (iterative_hash_template_arg): And hash it.

	PR c++/47897
	* semantics.c (non_const_var_error): Split out from...
	(cxx_eval_constant_expression): ...here.
	(potential_constant_expression_1) [VAR_DECL]: Use it.
	Allow dependent variables.

2011-02-24  Jason Merrill  <jason@redhat.com>

	* parser.c (cp_parser_constant_expression): Set
	non_integral_constant_expression correctly for C++0x too.
	(cp_parser_static_assert): Allow non-constant expression.
	(cp_parser_direct_declarator): Expect non_constant_p to be set
	properly for C++0x.
	* pt.c (value_dependent_expression_p): Handle TYPEID_EXPR.
	* semantics.c (maybe_constant_value): Check type_unknown_p too.
	(potential_rvalue_constant_expression): New.
	(require_potential_rvalue_constant_expression): New.

2011-02-23  Jason Merrill  <jason@redhat.com>

	* cp-tree.h (DECL_PARM_LEVEL): New.
	(struct lang_decl_parm): Add level field.
	* name-lookup.c (function_parm_depth): New fn.
	* name-lookup.h: Declare it.
	* parser.c (cp_parser_parameter_declaration_list): Use it.
	* mangle.c (struct globals): Add parm_depth field.
	(write_bare_function_type): Adjust it.
	(write_expression): Include the level delta in PARM_DECL mangling
	for abi >= 6.

	* semantics.c (finish_decltype_type): Remove shortcut for decltype
	of id-expression.
	* mangle.c (write_type) [DECLTYPE_TYPE]: Strip it here for abi < 6.

2011-02-23  Nathan Froyd  <froydnj@codesourcery.com>

	PR c++/46868
	* parser.c (cp_parser_class_specifier): Require a closing brace
	to attempt error recovery.

2011-02-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47833
	* pt.c (struct pending_template): Add chain_next GTY option.
	* decl.c (struct named_label_use_entry): Likewise.

2011-02-22  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/47242
	* semantics.c (build_lambda_object): Bail out if a field is
	error_mark_node.

2011-02-22  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47666
	* class.c (dfs_declare_virt_assop_and_dtor)
	(declare_virt_assop_and_dtor): New static functions.
	(add_implicitly_declared_members): Use
	declare_virt_assop_and_dtor.

2011-02-21  Jason Merrill  <jason@redhat.com>

	PR c++/47207
	* decl2.c (decl_constant_var_p): A constexpr var needs an
	initializer to be constant.
	* semantics.c (cxx_eval_constant_expression): Complain about
	constexpr var used in its own initializer.
	* call.c (set_up_extended_ref_temp): Set
	DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P too.

2011-02-20  Jason Merrill  <jason@redhat.com>

	PR c++/47199
	* semantics.c (cxx_eval_call_expression): Call
	cxx_eval_constant_expression in trivial shortcut.

	PR c++/46831
	* call.c (convert_class_to_reference): Don't try to set up a
	second conv sequence for non-viable candidates.

	PR c++/47703
	* error.c (location_of): Handle non-tagged types.

	PR c++/46472
	* method.c (process_subob_fn): Instantiate constexpr templates.
	* optimize.c (maybe_clone_body): Propagate DECL_DECLARED_CONSTEXPR_P.

2011-02-20  Dodji Seketeli  <dodji@redhat.com>

	PR c++/46394
	* pt.c (tsubst_pack_expansion): do not use
	cp_tree_equal/same_type_p to detect an expansion of a parameter
	pack.

2011-02-19  Jason Merrill  <jason@redhat.com>

	PR c++/47503
	* semantics.c (cxx_eval_call_expression): Shortcut trivial copy.

2011-02-18  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/47795
	* semantics.c (finish_non_static_data_member): Early return if
	object is error_mark_node.

2011-02-18  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47208
	* pt.c (do_auto_deduction): Do not mention error_mark_node in
    	diagnostics.
	* semantics.c (finish_id_expression): Do not pass erroneous decl
    	to decl_constant_var_p.

2011-02-17  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47783
	* cvt.c (convert_from_reference): Call mark_exp_read.

2011-02-11  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47172
	* pt.c (finish_call_expr): Consider a call expression that has a
	dependent "this" pointer as being dependent.  Add comments.
	(dependent_type_p, type_dependent_expression_p): Update comments.

2011-02-16  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47326
	* pt.c (tsubst_copy)<case SIZEOF_EXPR>: Ensure that even pack
    	expansion arguments are not evaluated.

2011-02-16  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47704
	* cp-tree.h (ENUM_FIXED_UNDERLYING_TYPE_P): Use TYPE_LANG_FLAG_5
	instead of TYPE_LANG_FLAG_3.
	* pt.c (lookup_template_class): Copy over
	ENUM_FIXED_UNDERLYING_TYPE_P.

2011-02-15  Jason Merrill  <jason@redhat.com>

	PR c++/46807
	* method.c (synthesized_method_walk): Always exit early for
	trivial fn in C++98 mode.

2011-02-14  Jason Merrill  <jason@redhat.com>

	PR c++/47482
	* parser.c (cp_parser_enumerator_definition): Call
	fold_non_dependent_expr.

2011-02-09  Jason Merrill  <jason@redhat.com>

	* decl.c (cp_make_fname_decl): Set DECL_THIS_STATIC at toplevel.
	* semantics.c (finish_fname): Only return the name if we're in
	a function.

	* decl.c (build_enumerator): Don't perform integral promotions on
	non-integral constants.

	* cvt.c (convert_to_void): Handle null op1.

	* class.c (type_has_constexpr_default_constructor): Make sure the
	caller stripped an enclosing array.
	* init.c (perform_member_init): Strip arrays before calling it.

	PR c++/47511
	* semantics.c (potential_constant_expression_1): Handle TEMPLATE_DECL.

2011-02-03  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47398
	* tree.c (cp_tree_equal)<TEMPLATE_PARM_INDEX>: Take the number of
	template parameters in account.

2011-02-03  Nathan Froyd  <froydnj@codesourcery.com>

	PR c++/46890
	* parser.c (cp_parser_class_specifier): Fix setting of
	want_semicolon.

2011-01-31  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47416
	* semantics.c (build_data_member_initialization): Handle
	STATEMENT_LIST always instead of just for CLEANUP_BODY.

2011-01-31  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>

	* g++spec.c (lang_specific_driver) [HAVE_LD_STATIC_DYNAMIC] Use
	LD_STATIC_OPTION, LD_DYNAMIC_OPTION.

2011-01-29  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47311
	* cp-tree.h (fixup_template_parms): Declare.
	* pt.c (end_template_parm_list): Do not fixup template parms here.
	(fixup_template_parms): Remove static. Fix typo in the
	comments. Remove useless code statement.
	(fixup_template_parm): For a template template parameter, fixup
	its attributes before fixing up its type.
	* parser.c
	(cp_parser_template_declaration_after_export): After parsing
	template parameters fixup their types.

2011-01-26  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47476
	* semantics.c (potential_constant_expression_1): Handle
	TRUTH_XOR_EXPR.

2011-01-26  Dave Korn  <dave.korn.cygwin@gmail.com>

	PR c++/43601
	* semantics.c (expand_or_defer_fn_1): Handle it.
	* decl2.c (decl_needed_p): Likewise.

2011-01-21  Jason Merrill  <jason@redhat.com>

	PR c++/47041
	* semantics.c (build_constexpr_constructor_member_initializers):
	Handle trivial copy.

2011-01-21  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47388
	* semantics.c (begin_for_stmt): If -fno-for-scope, don't
	assume init must be NULL if scope is NULL.
	(begin_range_for_stmt): Likewise.

2011-01-21  Jason Merrill  <jason@redhat.com>

	PR c++/46552
	* semantics.c (cxx_eval_constant_expression): Handle OFFSET_REF.

	PR c++/46977
	* semantics.c (potential_constant_expression_1): Split out from
	potential_constant_expression.  Add want_rval parm.  Handle
	template expression forms.  Don't enforce restriction on address
	of automatic variable here.  Add a couple of diagnostics that
	had been missing.
	(require_potential_constant_expression): New entry point.
	(build_data_member_initialization, register_constexpr_fundef): Adjust.
	(maybe_constant_value): Check potential_constant_expression.
	* pt.c (fold_non_dependent_expr_sfinae): Likewise.
	* tree.c (build_vec_init_expr): Adjust.

2011-01-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47303
	* decl2.c (finish_anon_union): Only call mangle_decl if TREE_STATIC
	or DECL_EXTERNAL.

2011-01-17  Jason Merrill  <jason@redhat.com>

	PR c++/47067
	* semantics.c (base_field_constructor_elt): New fn.
	(cxx_eval_bare_aggregate): Use it.
	(build_data_member_initialization): Leave COMPONENT_REF for
	vfield inits.

2011-01-14  Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>

	* parser.c (cp_parser_range_for): Remove the "unused variable" warning
	workaround.

2011-01-15  Giovanni Funchal  <gafunchal@gmail.com>
	    Jonathan Wakely  <jwakely.gcc@gmail.com>

	PR c++/33558
	* decl.c (grokdeclarator): Reject mutable reference members.

2011-01-14  Jason Merrill  <jason@redhat.com>

	PR c++/47289
	* pt.c (coerce_template_parms): Fix error recovery.

	PR c++/46903
	* typeck2.c (check_narrowing): Only check arithmetic types.

	PR c++/46688
	* tree.c (build_vec_init_expr): Handle flexible array
	properly.

2011-01-13  Kai Tietz  <kai.tietz@onevision.com>

	PR c++/47213
	* cp-tree.h (CLASSTYPE_VISIBILITY): Use
	TYPE_MAIN_DECL instead of TYPE_NAME.
	(CLASSTYPE_VISIBILITY_SPECIFIED): Likewise.
	* decl2.c (determine_visibility): Add check
	of CLASS_TYPE_P for underlying_type.

2011-01-12  Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>

	* cp-tree.h (begin_for_scope): New prototype.
	(begin_for_stmt): Update prototype.
	(begin_range_for_stmt): Update prototype.
	* init.c (build_vec_init): Update call to begin_for_stmt.
	* parser.c (cp_parser_for): New.
	(cp_parser_c_for): Add three new parameters.
	(cp_parser_range_for): Likewise. Most parsing code removed.
	(cp_parser_iteration_statement): Call cp_parser_for instead of
	cp_parser_c_for and cp_parser_range_for.
	(cp_parser_for_init_statement): Add new parameter and return type.
	(cp_parser_block_declaration): Update call to
	cp_parser_simple_declaration.
	(cp_parser_simple_declaration): Add new parameter.
	Update call to cp_parser_init_declarator.
	(cp_parser_init_declarator): Add new parameter.
	* pt.c (tsubst_expr): Update call to begin_for_stmt.
	* semantics.c (begin_for_scope): New.
	(begin_for_stmt): Add two new parameters.
	(begin_range_for_stmt): Likewise.

2011-01-12  Nicola Pero  <nicola.pero@meta-innovation.com>

	* parser.c (cp_parser_objc_at_property_declaration): Improved
	error message.

2011-01-11  Dodji Seketeli  <dodji@redhat.com>

	PR debug/46955
	* cp-lang.c (get_template_innermost_arguments_folded)
	(get_template_argument_pack_elems_folded)
	(template_arg_needs_folding, fold_cplus_constants): New static
	functions.
	(LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS): Set this hook to
	get_template_innermost_arguments_folded.
	(LANG_HOOKS_GET_ARGUMENT_PACK_ELEMS): Set this hook to
	get_template_argument_pack_elems_folded.

2011-01-11  Jason Merrill  <jason@redhat.com>

	PR c++/46658
	* init.c (build_new_1): Handle value-init in templates differently.

	PR c++/45520
	* tree.c (maybe_dummy_object): Check current_class_ref against
	context, not current_class_type.

2011-01-08  Nicola Pero  <nicola.pero@meta-innovation.com>

	PR objc/47078
	* parser.c (cp_parser_objc_typename): If the type is unknown, for
	error recovery purposes behave as if it was not specified so that
	the default type is used.

2011-01-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/47022
	* pt.c (tsubst_copy_and_build): Use tsubst instead of tsubst_copy
	for the second build_x_va_arg argument.

2011-01-05  Tom Tromey  <tromey@redhat.com>

	* typeck.c (cp_build_addr_expr_1): Update call to lvalue_error.
	(lvalue_or_else): Likewise.

2011-01-01  Kai Tietz  <kai.tietz@onevision.com>

	PR target/38662
	* tree.c (cxx_type_hash_eq):
	Allow METHOD_TYPE, too.


Copyright (C) 2011 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
